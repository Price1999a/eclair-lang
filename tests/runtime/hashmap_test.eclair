// RUN: split-file %s %t

// RUN: %eclair compile %t/program.eclair > %t/program.ll
// RUN: %clang -O0 -o %t/program %t/main.c %t/program.ll
// RUN: %t/program

//--- program.eclair
@def fact(u32) output.

//--- main.c

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef uint32_t u32;

typedef struct symbol {
  u32 size;
  char *data;
} __attribute__((packed)) symbol_t;

typedef struct entry {
  symbol_t symbol;
  u32 value;
} entry_t;

typedef struct bucket {
  entry_t *start;
  entry_t *end;
  u32 capacity;
} bucket_t;

typedef struct hashmap {
  bucket_t buckets[64];
} eclair_hashmap_t;

static void ASSERT(bool result, const char *msg) {
  if (!result) {
    printf("Assertion failed: %s\n", msg);
    exit(1);
  }
}

extern void eclair_hashmap_init(void *map);
extern void eclair_hashmap_destroy(void *map);
extern u32 eclair_hashmap_get_or_put_value(void *map, void *key, u32 value);
extern bool eclair_hashmap_contains(void *map, void *key);
extern u32 eclair_hashmap_lookup(void *map, void *key);

static void test_eclair_hashmap_init() {
  eclair_hashmap_t map;
  eclair_hashmap_init(&map);
  eclair_hashmap_destroy(&map);
}

static void test_eclair_hashmap_collisions() {
  eclair_hashmap_t map;
  eclair_hashmap_init(&map);

  // NOTE: these 2 create a collision
  symbol_t symbol1 = {.size = 1, .data = "<"};
  symbol_t symbol2 = {.size = 1, .data = "|"};
  eclair_hashmap_get_or_put_value(&map, &symbol1, 0);
  eclair_hashmap_get_or_put_value(&map, &symbol2, 1);

  u32 hash = 60; // 60 % 64 or 124 % 64 = 60
  printf("%s, %s\n", map.buckets[hash].start[0].symbol.data, symbol1.data);
  ASSERT(map.buckets[hash].start[0].symbol.data == symbol1.data,
         "Unexpected symbol1 in hashmap");
  ASSERT(map.buckets[hash].start[0].value == 0, "Unexpected value1 in hashmap");
  ASSERT(map.buckets[hash].start[1].symbol.data == symbol2.data,
         "Unexpected symbol2 in hashmap");
  ASSERT(map.buckets[hash].start[1].value == 1, "Unexpected value2 in hashmap");

  eclair_hashmap_destroy(&map);
}

static void test_eclair_hashmap_get_or_put_value() {
  eclair_hashmap_t map;
  eclair_hashmap_init(&map);

  // NOTE: these 2 create a collision
  symbol_t symbol1 = {.size = 1, .data = "<"};
  symbol_t symbol2 = {.size = 1, .data = "|"};

  // non-existing value => adds new value
  u32 result1 = eclair_hashmap_get_or_put_value(&map, &symbol1, 0);
  u32 result2 = eclair_hashmap_get_or_put_value(&map, &symbol2, 1);
  ASSERT(result1 == 0, "Unexpected result from eclair_hashmap_get_or_put_value");
  ASSERT(result2 == 1, "Unexpected result from eclair_hashmap_get_or_put_value");

  // existing value => finds existing value
  u32 result3 = eclair_hashmap_get_or_put_value(&map, &symbol1, 2);
  u32 result4 = eclair_hashmap_get_or_put_value(&map, &symbol2, 3);
  ASSERT(result1 == 0, "Unexpected result from eclair_hashmap_get_or_put_value");
  ASSERT(result2 == 1, "Unexpected result from eclair_hashmap_get_or_put_value");

  eclair_hashmap_destroy(&map);
}

static void test_eclair_hashmap_contains() {
  eclair_hashmap_t map;
  eclair_hashmap_init(&map);

  // NOTE: these 2 create a collision
  symbol_t symbol1 = {.size = 1, .data = "<"};
  symbol_t symbol2 = {.size = 1, .data = "|"};
  eclair_hashmap_get_or_put_value(&map, &symbol1, 0);
  eclair_hashmap_get_or_put_value(&map, &symbol2, 1);

  ASSERT(eclair_hashmap_contains(&map, &symbol1), "Expected to find symbol1!");
  ASSERT(eclair_hashmap_contains(&map, &symbol2), "Expected to find symbol2!");

  symbol_t symbol3 = {.size = 1, .data = "a"};
  ASSERT(!eclair_hashmap_contains(&map, &symbol3), "Expected not to find symbol3!");

  eclair_hashmap_destroy(&map);
}

static void test_eclair_hashmap_lookup() {
  // NOTE: can't be used for value not present in map!
  eclair_hashmap_t map;
  eclair_hashmap_init(&map);

  // NOTE: these 2 create a collision
  symbol_t symbol1 = {.size = 1, .data = "<"};
  symbol_t symbol2 = {.size = 1, .data = "|"};
  eclair_hashmap_get_or_put_value(&map, &symbol1, 0);
  eclair_hashmap_get_or_put_value(&map, &symbol2, 1);

  symbol_t symbol3 = {.size = 1, .data = "a"};
  eclair_hashmap_get_or_put_value(&map, &symbol3, 2);

  ASSERT(eclair_hashmap_lookup(&map, &symbol1) == 0, "Expected to find symbol1!");
  ASSERT(eclair_hashmap_lookup(&map, &symbol2) == 1, "Expected to find symbol2!");
  ASSERT(eclair_hashmap_lookup(&map, &symbol3) == 2, "Expected to find symbol3!");

  eclair_hashmap_destroy(&map);
}

int main(int argc, char **argv) {
  printf("Starting tests..\n");
  test_eclair_hashmap_init();
  printf("hashmap init: OK!\n");
  test_eclair_hashmap_collisions();
  printf("hashmap collisions: OK!\n");
  test_eclair_hashmap_get_or_put_value();
  printf("hashmap get or put value: OK!\n");
  test_eclair_hashmap_contains();
  printf("hashmap contains: OK!\n");
  test_eclair_hashmap_lookup();
  printf("Hashmap: all good!\n");
  return 0;
}
