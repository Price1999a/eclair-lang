// RUN: split-file %s %t

// RUN: %eclair compile %t/program.eclair > %t/program.ll
// RUN: %clang -o %t/program -O0 %t/main.c %t/program.ll
// RUN: %t/program | FileCheck %s

// No output, since it never matches
// CHECK:      func triggered with: 456
// CHECK:      func triggered with: 123
// CHECK-NEXT: COUNT: 1
// CHECK-NEXT: RESULT: 123

//--- program.eclair
@def edge(u32, u32) input.
@def test_externs(u32) output.

@extern func(u32) u32.

test_externs(func(123)).

test_externs(x) :-
  edge(x, _),
  x = func(456).

//--- main.c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

struct program;
struct symbol_table;

extern struct program* eclair_program_init();
extern void eclair_program_destroy(struct program*);
extern void eclair_program_run(struct program*);
extern void eclair_add_facts(struct program*, uint32_t fact_type, uint32_t* data, size_t fact_count);
extern void eclair_add_fact(struct program*, uint32_t fact_type, uint32_t* data);
extern uint32_t* eclair_get_facts(struct program*, uint32_t fact_type);
extern void eclair_free_buffer(uint32_t* data);

uint32_t func(struct symbol_table*, uint32_t value) {
    printf("func triggered with: %d\n", value);
    return value;
}

int main(int argc, char** argv)
{
    struct program* prog = eclair_program_init();

    // edge(1,2), edge(2,3)
    uint32_t data[] = {
        1, 2,
        2, 3
    };
    eclair_add_facts(prog, 0, data, 2);

    eclair_program_run(prog);

    uint32_t fact_count = eclair_fact_count(prog, 1);
    uint32_t* data_out = eclair_get_facts(prog, 1);
    printf("COUNT: %d\n", fact_count);
    printf("RESULT: %d\n", data_out[0]);

    eclair_free_buffer(data_out);

    eclair_program_destroy(prog);
    return 0;
}
