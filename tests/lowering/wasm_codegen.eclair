// RUN: split-file %s %t

// RUN: %eclair compile --target wasm32 --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@memcmp_wasm32" > %t/actual_wasm_memcmp.out
// RUN: diff %t/expected_wasm_memcmp.out %t/actual_wasm_memcmp.out

//--- program.eclair
@def edge(u32, u32) output.
@def another(u32, u32, u32) output.

edge(1, 2).

another(1,2,3).

//--- expected_wasm_memcmp.out
define external ccc i32 @memcmp_wasm32(ptr %array1_0, ptr %array2_0, i64 %byte_count_0) {
start:
  %0 = udiv i64 %byte_count_0, 8
  %1 = and i64 %byte_count_0, 7
  br label %for_begin_0
for_begin_0:
  %2 = phi i64 [0, %start], [%9, %end_if_0]
  %3 = icmp ult i64 %2, %0
  br i1 %3, label %for_body_0, label %for_end_0
for_body_0:
  %4 = getelementptr i64, ptr %array1_0, i64 %2
  %5 = getelementptr i64, ptr %array2_0, i64 %2
  %6 = load i64, ptr %4
  %7 = load i64, ptr %5
  %8 = icmp ne i64 %6, %7
  br i1 %8, label %if_0, label %end_if_0
if_0:
  ret i32 1
end_if_0:
  %9 = add i64 1, %2
  br label %for_begin_0
for_end_0:
  %10 = mul i64 %0, 8
  br label %for_begin_1
for_begin_1:
  %11 = phi i64 [0, %for_end_0], [%19, %end_if_1]
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %for_body_1, label %for_end_1
for_body_1:
  %13 = add i64 %11, %10
  %14 = getelementptr i8, ptr %array1_0, i64 %13
  %15 = getelementptr i8, ptr %array2_0, i64 %13
  %16 = load i8, ptr %14
  %17 = load i8, ptr %15
  %18 = icmp ne i8 %16, %17
  br i1 %18, label %if_1, label %end_if_1
if_1:
  ret i32 1
end_if_1:
  %19 = add i64 1, %11
  br label %for_begin_1
for_end_1:
  ret i32 0
}
