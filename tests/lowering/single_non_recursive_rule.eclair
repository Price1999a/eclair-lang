// RUN: split-file %s %t

// RUN: %eclair compile --emit ra %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

//--- program.eclair
@def edge(u32, u32).
@def path(u32, u32).

edge(1,2).

path(x,y) :-
  edge(x,y).

//--- expected_ra.out
project (1, 2) into edge
search edge as edge0 do
  project (edge0[0], edge0[1]) into path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  edge.init_empty(program.1)
  path.init_empty(program.2)
  return program
}

fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  edge.destroy(FN_ARG[0].1)
  path.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

fn eclair_program_run(*Program) -> Void
{
  value = edge.stack_allocate Value
  value.0 = 1
  value.1 = 2
  edge.insert(FN_ARG[0].1, value)
  value_1 = edge.stack_allocate Value
  value_1.0 = 0
  value_1.1 = 0
  value_2 = edge.stack_allocate Value
  value_2.0 = 4294967295
  value_2.1 = 4294967295
  begin_iter = edge.stack_allocate Iter
  end_iter = edge.stack_allocate Iter
  edge.iter_lower_bound(FN_ARG[0].1, value_1, begin_iter)
  edge.iter_upper_bound(FN_ARG[0].1, value_2, end_iter)
  loop
  {
    condition = edge.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = edge.iter_current(begin_iter)
    value_3 = path.stack_allocate Value
    value_3.0 = current.0
    value_3.1 = current.1
    path.insert(FN_ARG[0].2, value_3)
    edge.iter_next(begin_iter)
  }
  range_query.end:
}
