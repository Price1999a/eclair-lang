// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def edge(u32, u32).
@def path(u32, u32) output.

edge(1,2).

path(x,y) :-
  edge(x,y).

//--- expected_ra.out
project (1, 2) into edge
search edge as edge0 do
  project (edge0[0], edge0[1]) into path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  edge.init_empty(program.1)
  path.init_empty(program.2)
  symbol_table.insert(program.0, "edge")
  symbol_table.insert(program.0, "path")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  edge.destroy(FN_ARG[0].1)
  path.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = edge.stack_allocate Value
  value.0 = 1
  value.1 = 2
  edge.insert(FN_ARG[0].1, value)
  lower_bound_value = edge.stack_allocate Value
  upper_bound_value = edge.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  begin_iter = edge.stack_allocate Iter
  end_iter = edge.stack_allocate Iter
  edge.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  edge.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = edge.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = edge.iter_current(begin_iter)
    value_1 = path.stack_allocate Value
    value_1.0 = current.0
    value_1.1 = current.1
    path.insert(FN_ARG[0].2, value_1)
    edge.iter_next(begin_iter)
  }
  range_query.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc ptr @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %stack.ptr_0 = alloca %symbol_t, i32 1
  %stack.ptr_1 = alloca %symbol_t, i32 1
  %0 = call ccc ptr @malloc(i32 1592)
  %1 = getelementptr %program, ptr %0, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(ptr %1)
  %2 = getelementptr %program, ptr %0, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(ptr %2)
  %3 = getelementptr %program, ptr %0, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_0(ptr %3)
  %4 = getelementptr %program, ptr %0, i32 0, i32 0
  %5 = getelementptr inbounds [5 x i8], ptr @string_literal_0, i32 0, i32 0
  %6 = zext i32 4 to i64
  %7 = call ccc ptr @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %7, ptr %5, i64 %6, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_0, i32 4, ptr %7)
  %8 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %4, ptr %stack.ptr_0)
  %9 = getelementptr %program, ptr %0, i32 0, i32 0
  %10 = getelementptr inbounds [5 x i8], ptr @string_literal_1, i32 0, i32 0
  %11 = zext i32 4 to i64
  %12 = call ccc ptr @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %12, ptr %10, i64 %11, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_1, i32 4, ptr %12)
  %13 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %9, ptr %stack.ptr_1)
  ret ptr %0
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(ptr %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, ptr %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(ptr %0)
  %1 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(ptr %1)
  %2 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_0(ptr %2)
  call ccc void @free(ptr %arg_0)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(ptr %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [2 x i32], i32 1
  %stack.ptr_1 = alloca [2 x i32], i32 1
  %stack.ptr_2 = alloca [2 x i32], i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_4 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_5 = alloca [2 x i32], i32 1
  %0 = getelementptr [2 x i32], ptr %stack.ptr_0, i32 0, i32 0
  store i32 1, ptr %0
  %1 = getelementptr [2 x i32], ptr %stack.ptr_0, i32 0, i32 1
  store i32 2, ptr %1
  %2 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  %3 = call ccc i1 @eclair_btree_insert_value_0(ptr %2, ptr %stack.ptr_0)
  %4 = getelementptr [2 x i32], ptr %stack.ptr_1, i32 0, i32 0
  store i32 0, ptr %4
  %5 = getelementptr [2 x i32], ptr %stack.ptr_1, i32 0, i32 1
  store i32 0, ptr %5
  %6 = getelementptr [2 x i32], ptr %stack.ptr_2, i32 0, i32 0
  store i32 4294967295, ptr %6
  %7 = getelementptr [2 x i32], ptr %stack.ptr_2, i32 0, i32 1
  store i32 4294967295, ptr %7
  %8 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(ptr %8, ptr %stack.ptr_1, ptr %stack.ptr_3)
  %9 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(ptr %9, ptr %stack.ptr_2, ptr %stack.ptr_4)
  br label %loop_0
loop_0:
  %10 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_3, ptr %stack.ptr_4)
  br i1 %10, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %11 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_3)
  %12 = getelementptr [2 x i32], ptr %stack.ptr_5, i32 0, i32 0
  %13 = getelementptr [2 x i32], ptr %11, i32 0, i32 0
  %14 = load i32, ptr %13
  store i32 %14, ptr %12
  %15 = getelementptr [2 x i32], ptr %stack.ptr_5, i32 0, i32 1
  %16 = getelementptr [2 x i32], ptr %11, i32 0, i32 1
  %17 = load i32, ptr %16
  store i32 %17, ptr %15
  %18 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  %19 = call ccc i1 @eclair_btree_insert_value_0(ptr %18, ptr %stack.ptr_5)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_3)
  br label %loop_0
range_query.end:
  ret void
}
