// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn eclair_program_run" > %t/actual_eclair_program_run.out
// RUN: diff %t/expected_eclair_program_run.out %t/actual_eclair_program_run.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def a(u32) output.
@def b(u32, u32) input.
@def c(u32, u32, u32, u32, u32) input.
@def other(u32) input.

a(x) :-
  b(x, x),
  other(x).

a(y) :-
  c(y, y, 42, _, y),
  other(y).

//--- expected_ra.out
search c as c0 where (c0[2] = 42) do
  if c0[0] = c0[1] do
    if c0[0] = c0[4] do
      search other as other1 where (c0[0] = other1[0]) do
        project (c0[0]) into a
search b as b0 do
  if b0[0] = b0[1] do
    search other as other1 where (b0[0] = other1[0]) do
      project (b0[0]) into a
//--- expected_eclair_program_run.out
export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = c.stack_allocate Value
  upper_bound_value = c.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  lower_bound_value.2 = 42
  lower_bound_value.3 = 0
  lower_bound_value.4 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  upper_bound_value.2 = 42
  upper_bound_value.3 = 4294967295
  upper_bound_value.4 = 4294967295
  begin_iter = c.stack_allocate Iter
  end_iter = c.stack_allocate Iter
  c.iter_lower_bound(FN_ARG[0].3, lower_bound_value, begin_iter)
  c.iter_upper_bound(FN_ARG[0].3, upper_bound_value, end_iter)
  loop
  {
    condition = c.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = c.iter_current(begin_iter)
    condition_1 = (current.0 == current.1)
    if (condition_1)
    {
      condition_2 = (current.0 == current.4)
      if (condition_2)
      {
        lower_bound_value_1 = other.stack_allocate Value
        upper_bound_value_1 = other.stack_allocate Value
        lower_bound_value_1.0 = current.0
        upper_bound_value_1.0 = current.0
        begin_iter_1 = other.stack_allocate Iter
        end_iter_1 = other.stack_allocate Iter
        other.iter_lower_bound(FN_ARG[0].4, lower_bound_value_1, begin_iter_1)
        other.iter_upper_bound(FN_ARG[0].4, upper_bound_value_1, end_iter_1)
        loop
        {
          condition_3 = other.iter_is_equal(begin_iter_1, end_iter_1)
          if (condition_3)
          {
            goto range_query.end_1
          }
          current_1 = other.iter_current(begin_iter_1)
          value = a.stack_allocate Value
          value.0 = current.0
          a.insert(FN_ARG[0].1, value)
          other.iter_next(begin_iter_1)
        }
        range_query.end_1:
      }
    }
    c.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_2 = b.stack_allocate Value
  upper_bound_value_2 = b.stack_allocate Value
  lower_bound_value_2.0 = 0
  lower_bound_value_2.1 = 0
  upper_bound_value_2.0 = 4294967295
  upper_bound_value_2.1 = 4294967295
  begin_iter_2 = b.stack_allocate Iter
  end_iter_2 = b.stack_allocate Iter
  b.iter_lower_bound(FN_ARG[0].2, lower_bound_value_2, begin_iter_2)
  b.iter_upper_bound(FN_ARG[0].2, upper_bound_value_2, end_iter_2)
  loop
  {
    condition_4 = b.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_4)
    {
      goto range_query.end_2
    }
    current_2 = b.iter_current(begin_iter_2)
    condition_5 = (current_2.0 == current_2.1)
    if (condition_5)
    {
      lower_bound_value_3 = other.stack_allocate Value
      upper_bound_value_3 = other.stack_allocate Value
      lower_bound_value_3.0 = current_2.0
      upper_bound_value_3.0 = current_2.0
      begin_iter_3 = other.stack_allocate Iter
      end_iter_3 = other.stack_allocate Iter
      other.iter_lower_bound(FN_ARG[0].4, lower_bound_value_3, begin_iter_3)
      other.iter_upper_bound(FN_ARG[0].4, upper_bound_value_3, end_iter_3)
      loop
      {
        condition_6 = other.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_6)
        {
          goto range_query.end_3
        }
        current_3 = other.iter_current(begin_iter_3)
        value_1 = a.stack_allocate Value
        value_1.0 = current_2.0
        a.insert(FN_ARG[0].1, value_1)
        other.iter_next(begin_iter_3)
      }
      range_query.end_3:
    }
    b.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(ptr %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [5 x i32], i32 1
  %stack.ptr_1 = alloca [5 x i32], i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_2, i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_2, i32 1
  %stack.ptr_4 = alloca [1 x i32], i32 1
  %stack.ptr_5 = alloca [1 x i32], i32 1
  %stack.ptr_6 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_7 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_8 = alloca [1 x i32], i32 1
  %stack.ptr_9 = alloca [2 x i32], i32 1
  %stack.ptr_10 = alloca [2 x i32], i32 1
  %stack.ptr_11 = alloca %btree_iterator_t_1, i32 1
  %stack.ptr_12 = alloca %btree_iterator_t_1, i32 1
  %stack.ptr_13 = alloca [1 x i32], i32 1
  %stack.ptr_14 = alloca [1 x i32], i32 1
  %stack.ptr_15 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_16 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_17 = alloca [1 x i32], i32 1
  %0 = getelementptr [5 x i32], ptr %stack.ptr_0, i32 0, i32 0
  store i32 0, ptr %0
  %1 = getelementptr [5 x i32], ptr %stack.ptr_0, i32 0, i32 1
  store i32 0, ptr %1
  %2 = getelementptr [5 x i32], ptr %stack.ptr_0, i32 0, i32 2
  store i32 42, ptr %2
  %3 = getelementptr [5 x i32], ptr %stack.ptr_0, i32 0, i32 3
  store i32 0, ptr %3
  %4 = getelementptr [5 x i32], ptr %stack.ptr_0, i32 0, i32 4
  store i32 0, ptr %4
  %5 = getelementptr [5 x i32], ptr %stack.ptr_1, i32 0, i32 0
  store i32 4294967295, ptr %5
  %6 = getelementptr [5 x i32], ptr %stack.ptr_1, i32 0, i32 1
  store i32 4294967295, ptr %6
  %7 = getelementptr [5 x i32], ptr %stack.ptr_1, i32 0, i32 2
  store i32 42, ptr %7
  %8 = getelementptr [5 x i32], ptr %stack.ptr_1, i32 0, i32 3
  store i32 4294967295, ptr %8
  %9 = getelementptr [5 x i32], ptr %stack.ptr_1, i32 0, i32 4
  store i32 4294967295, ptr %9
  %10 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_lower_bound_2(ptr %10, ptr %stack.ptr_0, ptr %stack.ptr_2)
  %11 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_upper_bound_2(ptr %11, ptr %stack.ptr_1, ptr %stack.ptr_3)
  br label %loop_0
loop_0:
  %12 = call ccc i1 @eclair_btree_iterator_is_equal_2(ptr %stack.ptr_2, ptr %stack.ptr_3)
  br i1 %12, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %13 = call ccc ptr @eclair_btree_iterator_current_2(ptr %stack.ptr_2)
  %14 = getelementptr [5 x i32], ptr %13, i32 0, i32 0
  %15 = load i32, ptr %14
  %16 = getelementptr [5 x i32], ptr %13, i32 0, i32 1
  %17 = load i32, ptr %16
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %if_1, label %end_if_3
if_1:
  %19 = getelementptr [5 x i32], ptr %13, i32 0, i32 0
  %20 = load i32, ptr %19
  %21 = getelementptr [5 x i32], ptr %13, i32 0, i32 4
  %22 = load i32, ptr %21
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %if_2, label %end_if_2
if_2:
  %24 = getelementptr [1 x i32], ptr %stack.ptr_4, i32 0, i32 0
  %25 = getelementptr [5 x i32], ptr %13, i32 0, i32 0
  %26 = load i32, ptr %25
  store i32 %26, ptr %24
  %27 = getelementptr [1 x i32], ptr %stack.ptr_5, i32 0, i32 0
  %28 = getelementptr [5 x i32], ptr %13, i32 0, i32 0
  %29 = load i32, ptr %28
  store i32 %29, ptr %27
  %30 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(ptr %30, ptr %stack.ptr_4, ptr %stack.ptr_6)
  %31 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(ptr %31, ptr %stack.ptr_5, ptr %stack.ptr_7)
  br label %loop_1
loop_1:
  %32 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_6, ptr %stack.ptr_7)
  br i1 %32, label %if_3, label %end_if_1
if_3:
  br label %range_query.end_1
end_if_1:
  %33 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_6)
  %34 = getelementptr [1 x i32], ptr %stack.ptr_8, i32 0, i32 0
  %35 = getelementptr [5 x i32], ptr %13, i32 0, i32 0
  %36 = load i32, ptr %35
  store i32 %36, ptr %34
  %37 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  %38 = call ccc i1 @eclair_btree_insert_value_0(ptr %37, ptr %stack.ptr_8)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_6)
  br label %loop_1
range_query.end_1:
  br label %end_if_2
end_if_2:
  br label %end_if_3
end_if_3:
  call ccc void @eclair_btree_iterator_next_2(ptr %stack.ptr_2)
  br label %loop_0
range_query.end:
  %39 = getelementptr [2 x i32], ptr %stack.ptr_9, i32 0, i32 0
  store i32 0, ptr %39
  %40 = getelementptr [2 x i32], ptr %stack.ptr_9, i32 0, i32 1
  store i32 0, ptr %40
  %41 = getelementptr [2 x i32], ptr %stack.ptr_10, i32 0, i32 0
  store i32 4294967295, ptr %41
  %42 = getelementptr [2 x i32], ptr %stack.ptr_10, i32 0, i32 1
  store i32 4294967295, ptr %42
  %43 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_1(ptr %43, ptr %stack.ptr_9, ptr %stack.ptr_11)
  %44 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_1(ptr %44, ptr %stack.ptr_10, ptr %stack.ptr_12)
  br label %loop_2
loop_2:
  %45 = call ccc i1 @eclair_btree_iterator_is_equal_1(ptr %stack.ptr_11, ptr %stack.ptr_12)
  br i1 %45, label %if_4, label %end_if_4
if_4:
  br label %range_query.end_2
end_if_4:
  %46 = call ccc ptr @eclair_btree_iterator_current_1(ptr %stack.ptr_11)
  %47 = getelementptr [2 x i32], ptr %46, i32 0, i32 0
  %48 = load i32, ptr %47
  %49 = getelementptr [2 x i32], ptr %46, i32 0, i32 1
  %50 = load i32, ptr %49
  %51 = icmp eq i32 %48, %50
  br i1 %51, label %if_5, label %end_if_6
if_5:
  %52 = getelementptr [1 x i32], ptr %stack.ptr_13, i32 0, i32 0
  %53 = getelementptr [2 x i32], ptr %46, i32 0, i32 0
  %54 = load i32, ptr %53
  store i32 %54, ptr %52
  %55 = getelementptr [1 x i32], ptr %stack.ptr_14, i32 0, i32 0
  %56 = getelementptr [2 x i32], ptr %46, i32 0, i32 0
  %57 = load i32, ptr %56
  store i32 %57, ptr %55
  %58 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(ptr %58, ptr %stack.ptr_13, ptr %stack.ptr_15)
  %59 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(ptr %59, ptr %stack.ptr_14, ptr %stack.ptr_16)
  br label %loop_3
loop_3:
  %60 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_15, ptr %stack.ptr_16)
  br i1 %60, label %if_6, label %end_if_5
if_6:
  br label %range_query.end_3
end_if_5:
  %61 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_15)
  %62 = getelementptr [1 x i32], ptr %stack.ptr_17, i32 0, i32 0
  %63 = getelementptr [2 x i32], ptr %46, i32 0, i32 0
  %64 = load i32, ptr %63
  store i32 %64, ptr %62
  %65 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  %66 = call ccc i1 @eclair_btree_insert_value_0(ptr %65, ptr %stack.ptr_17)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_15)
  br label %loop_3
range_query.end_3:
  br label %end_if_6
end_if_6:
  call ccc void @eclair_btree_iterator_next_1(ptr %stack.ptr_11)
  br label %loop_2
range_query.end_2:
  ret void
}
