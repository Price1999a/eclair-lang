// RUN: split-file %s %t

// RUN: %eclair compile --emit ra %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "eclair_program_run" > %t/actual_eclair_program_run.out
// RUN: diff %t/expected_eclair_program_run.out %t/actual_eclair_program_run.out

//--- program.eclair
@def a(u32).
@def b(u32, u32).
@def c(u32, u32, u32, u32, u32).
@def other(u32).

a(x) :-
  b(x, x),
  other(x).

a(y) :-
  c(y, y, 42, x, y),
  other(y).

//--- expected_ra.out
search c as c0 where (c0[2] = 42) do
  search other as other1 where (other1[0] = c0[0]) do
    if c0[0] = c0[4] do
      if c0[0] = c0[1] do
        project (c0[0]) into a
search b as b0 do
  search other as other1 where (other1[0] = b0[0]) do
    if b0[0] = b0[1] do
      project (b0[0]) into a
//--- expected_eclair_program_run.out
fn eclair_program_run(*Program) -> Void
{
  value = c.stack_allocate Value
  value.0 = 0
  value.1 = 0
  value.2 = 42
  value.3 = 0
  value.4 = 0
  value_1 = c.stack_allocate Value
  value_1.0 = 4294967295
  value_1.1 = 4294967295
  value_1.2 = 42
  value_1.3 = 4294967295
  value_1.4 = 4294967295
  begin_iter = c.stack_allocate Iter
  end_iter = c.stack_allocate Iter
  c.iter_lower_bound(FN_ARG[0].3, value, begin_iter)
  c.iter_upper_bound(FN_ARG[0].3, value_1, end_iter)
  loop
  {
    condition = c.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = c.iter_current(begin_iter)
    value_2 = other.stack_allocate Value
    value_2.0 = current.0
    value_3 = other.stack_allocate Value
    value_3.0 = current.0
    begin_iter_1 = other.stack_allocate Iter
    end_iter_1 = other.stack_allocate Iter
    other.iter_lower_bound(FN_ARG[0].4, value_2, begin_iter_1)
    other.iter_upper_bound(FN_ARG[0].4, value_3, end_iter_1)
    loop
    {
      condition_1 = other.iter_is_equal(begin_iter_1, end_iter_1)
      if (condition_1)
      {
        goto range_query.end_1
      }
      current_1 = other.iter_current(begin_iter_1)
      condition_2 = current.0 == current.4
      if (condition_2)
      {
        condition_3 = current.0 == current.1
        if (condition_3)
        {
          value_4 = a.stack_allocate Value
          value_4.0 = current.0
          a.insert(FN_ARG[0].1, value_4)
        }
      }
      other.iter_next(begin_iter_1)
    }
    range_query.end_1:
    c.iter_next(begin_iter)
  }
  range_query.end:
  value_5 = b.stack_allocate Value
  value_5.0 = 0
  value_5.1 = 0
  value_6 = b.stack_allocate Value
  value_6.0 = 4294967295
  value_6.1 = 4294967295
  begin_iter_2 = b.stack_allocate Iter
  end_iter_2 = b.stack_allocate Iter
  b.iter_lower_bound(FN_ARG[0].2, value_5, begin_iter_2)
  b.iter_upper_bound(FN_ARG[0].2, value_6, end_iter_2)
  loop
  {
    condition_4 = b.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_4)
    {
      goto range_query.end_2
    }
    current_2 = b.iter_current(begin_iter_2)
    value_7 = other.stack_allocate Value
    value_7.0 = current_2.0
    value_8 = other.stack_allocate Value
    value_8.0 = current_2.0
    begin_iter_3 = other.stack_allocate Iter
    end_iter_3 = other.stack_allocate Iter
    other.iter_lower_bound(FN_ARG[0].4, value_7, begin_iter_3)
    other.iter_upper_bound(FN_ARG[0].4, value_8, end_iter_3)
    loop
    {
      condition_5 = other.iter_is_equal(begin_iter_3, end_iter_3)
      if (condition_5)
      {
        goto range_query.end_3
      }
      current_3 = other.iter_current(begin_iter_3)
      condition_6 = current_2.0 == current_2.1
      if (condition_6)
      {
        value_9 = a.stack_allocate Value
        value_9.0 = current_2.0
        a.insert(FN_ARG[0].1, value_9)
      }
      other.iter_next(begin_iter_3)
    }
    range_query.end_3:
    b.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
