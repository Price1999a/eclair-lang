// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn eclair_program_run" > %t/actual_eclair_program_run.out
// RUN: diff %t/expected_eclair_program_run.out %t/actual_eclair_program_run.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def a(u32) output.
@def b(u32, u32) input.
@def c(u32, u32, u32, u32, u32) input.
@def other(u32) input.

a(x) :-
  b(x, x),
  other(x).

a(y) :-
  c(y, y, 42, _, y),
  other(y).

//--- expected_ra.out
search c as c0 where (c0[2] = 42) do
  if c0[0] = c0[1] do
    if c0[0] = c0[4] do
      search other as other1 where (c0[0] = other1[0]) do
        project (c0[0]) into a
search b as b0 do
  if b0[0] = b0[1] do
    search other as other1 where (b0[0] = other1[0]) do
      project (b0[0]) into a
//--- expected_eclair_program_run.out
export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = c.stack_allocate Value
  upper_bound_value = c.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  lower_bound_value.2 = 42
  lower_bound_value.3 = 0
  lower_bound_value.4 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  upper_bound_value.2 = 42
  upper_bound_value.3 = 4294967295
  upper_bound_value.4 = 4294967295
  begin_iter = c.stack_allocate Iter
  end_iter = c.stack_allocate Iter
  c.iter_lower_bound(FN_ARG[0].3, lower_bound_value, begin_iter)
  c.iter_upper_bound(FN_ARG[0].3, upper_bound_value, end_iter)
  loop
  {
    condition = c.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = c.iter_current(begin_iter)
    condition_1 = (current.0 == current.1)
    if (condition_1)
    {
      condition_2 = (current.0 == current.4)
      if (condition_2)
      {
        lower_bound_value_1 = other.stack_allocate Value
        upper_bound_value_1 = other.stack_allocate Value
        lower_bound_value_1.0 = current.0
        upper_bound_value_1.0 = current.0
        begin_iter_1 = other.stack_allocate Iter
        end_iter_1 = other.stack_allocate Iter
        other.iter_lower_bound(FN_ARG[0].4, lower_bound_value_1, begin_iter_1)
        other.iter_upper_bound(FN_ARG[0].4, upper_bound_value_1, end_iter_1)
        loop
        {
          condition_3 = other.iter_is_equal(begin_iter_1, end_iter_1)
          if (condition_3)
          {
            goto range_query.end_1
          }
          current_1 = other.iter_current(begin_iter_1)
          value = a.stack_allocate Value
          value.0 = current.0
          a.insert(FN_ARG[0].1, value)
          other.iter_next(begin_iter_1)
        }
        range_query.end_1:
      }
    }
    c.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_2 = b.stack_allocate Value
  upper_bound_value_2 = b.stack_allocate Value
  lower_bound_value_2.0 = 0
  lower_bound_value_2.1 = 0
  upper_bound_value_2.0 = 4294967295
  upper_bound_value_2.1 = 4294967295
  begin_iter_2 = b.stack_allocate Iter
  end_iter_2 = b.stack_allocate Iter
  b.iter_lower_bound(FN_ARG[0].2, lower_bound_value_2, begin_iter_2)
  b.iter_upper_bound(FN_ARG[0].2, upper_bound_value_2, end_iter_2)
  loop
  {
    condition_4 = b.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_4)
    {
      goto range_query.end_2
    }
    current_2 = b.iter_current(begin_iter_2)
    condition_5 = (current_2.0 == current_2.1)
    if (condition_5)
    {
      lower_bound_value_3 = other.stack_allocate Value
      upper_bound_value_3 = other.stack_allocate Value
      lower_bound_value_3.0 = current_2.0
      upper_bound_value_3.0 = current_2.0
      begin_iter_3 = other.stack_allocate Iter
      end_iter_3 = other.stack_allocate Iter
      other.iter_lower_bound(FN_ARG[0].4, lower_bound_value_3, begin_iter_3)
      other.iter_upper_bound(FN_ARG[0].4, upper_bound_value_3, end_iter_3)
      loop
      {
        condition_6 = other.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_6)
        {
          goto range_query.end_3
        }
        current_3 = other.iter_current(begin_iter_3)
        value_1 = a.stack_allocate Value
        value_1.0 = current_2.0
        a.insert(FN_ARG[0].1, value_1)
        other.iter_next(begin_iter_3)
      }
      range_query.end_3:
    }
    b.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %0 = alloca [5 x i32], i32 1
  %1 = alloca [5 x i32], i32 1
  %2 = getelementptr [5 x i32], [5 x i32]* %0, i32 0, i32 0
  store i32 0, i32* %2
  %3 = getelementptr [5 x i32], [5 x i32]* %0, i32 0, i32 1
  store i32 0, i32* %3
  %4 = getelementptr [5 x i32], [5 x i32]* %0, i32 0, i32 2
  store i32 42, i32* %4
  %5 = getelementptr [5 x i32], [5 x i32]* %0, i32 0, i32 3
  store i32 0, i32* %5
  %6 = getelementptr [5 x i32], [5 x i32]* %0, i32 0, i32 4
  store i32 0, i32* %6
  %7 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 0
  store i32 4294967295, i32* %7
  %8 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 1
  store i32 4294967295, i32* %8
  %9 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 2
  store i32 42, i32* %9
  %10 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 3
  store i32 4294967295, i32* %10
  %11 = getelementptr [5 x i32], [5 x i32]* %1, i32 0, i32 4
  store i32 4294967295, i32* %11
  %12 = alloca %btree_iterator_t_2, i32 1
  %13 = alloca %btree_iterator_t_2, i32 1
  %14 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_lower_bound_2(%btree_t_2* %14, [5 x i32]* %0, %btree_iterator_t_2* %12)
  %15 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_upper_bound_2(%btree_t_2* %15, [5 x i32]* %1, %btree_iterator_t_2* %13)
  br label %loop_0
loop_0:
  %16 = call ccc i1 @eclair_btree_iterator_is_equal_2(%btree_iterator_t_2* %12, %btree_iterator_t_2* %13)
  br i1 %16, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %17 = call ccc [5 x i32]* @eclair_btree_iterator_current_2(%btree_iterator_t_2* %12)
  %18 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 0
  %19 = load i32, i32* %18
  %20 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 1
  %21 = load i32, i32* %20
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %if_1, label %end_if_3
if_1:
  %23 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 0
  %24 = load i32, i32* %23
  %25 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 4
  %26 = load i32, i32* %25
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %if_2, label %end_if_2
if_2:
  %28 = alloca [1 x i32], i32 1
  %29 = alloca [1 x i32], i32 1
  %30 = getelementptr [1 x i32], [1 x i32]* %28, i32 0, i32 0
  %31 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 0
  %32 = load i32, i32* %31
  store i32 %32, i32* %30
  %33 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %34 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 0
  %35 = load i32, i32* %34
  store i32 %35, i32* %33
  %36 = alloca %btree_iterator_t_0, i32 1
  %37 = alloca %btree_iterator_t_0, i32 1
  %38 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %38, [1 x i32]* %28, %btree_iterator_t_0* %36)
  %39 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %39, [1 x i32]* %29, %btree_iterator_t_0* %37)
  br label %loop_1
loop_1:
  %40 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %36, %btree_iterator_t_0* %37)
  br i1 %40, label %if_3, label %end_if_1
if_3:
  br label %range_query.end_1
end_if_1:
  %41 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %36)
  %42 = alloca [1 x i32], i32 1
  %43 = getelementptr [1 x i32], [1 x i32]* %42, i32 0, i32 0
  %44 = getelementptr [5 x i32], [5 x i32]* %17, i32 0, i32 0
  %45 = load i32, i32* %44
  store i32 %45, i32* %43
  %46 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %47 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %46, [1 x i32]* %42)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %36)
  br label %loop_1
range_query.end_1:
  br label %end_if_2
end_if_2:
  br label %end_if_3
end_if_3:
  call ccc void @eclair_btree_iterator_next_2(%btree_iterator_t_2* %12)
  br label %loop_0
range_query.end:
  %48 = alloca [2 x i32], i32 1
  %49 = alloca [2 x i32], i32 1
  %50 = getelementptr [2 x i32], [2 x i32]* %48, i32 0, i32 0
  store i32 0, i32* %50
  %51 = getelementptr [2 x i32], [2 x i32]* %48, i32 0, i32 1
  store i32 0, i32* %51
  %52 = getelementptr [2 x i32], [2 x i32]* %49, i32 0, i32 0
  store i32 4294967295, i32* %52
  %53 = getelementptr [2 x i32], [2 x i32]* %49, i32 0, i32 1
  store i32 4294967295, i32* %53
  %54 = alloca %btree_iterator_t_1, i32 1
  %55 = alloca %btree_iterator_t_1, i32 1
  %56 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_1(%btree_t_1* %56, [2 x i32]* %48, %btree_iterator_t_1* %54)
  %57 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_1(%btree_t_1* %57, [2 x i32]* %49, %btree_iterator_t_1* %55)
  br label %loop_2
loop_2:
  %58 = call ccc i1 @eclair_btree_iterator_is_equal_1(%btree_iterator_t_1* %54, %btree_iterator_t_1* %55)
  br i1 %58, label %if_4, label %end_if_4
if_4:
  br label %range_query.end_2
end_if_4:
  %59 = call ccc [2 x i32]* @eclair_btree_iterator_current_1(%btree_iterator_t_1* %54)
  %60 = getelementptr [2 x i32], [2 x i32]* %59, i32 0, i32 0
  %61 = load i32, i32* %60
  %62 = getelementptr [2 x i32], [2 x i32]* %59, i32 0, i32 1
  %63 = load i32, i32* %62
  %64 = icmp eq i32 %61, %63
  br i1 %64, label %if_5, label %end_if_6
if_5:
  %65 = alloca [1 x i32], i32 1
  %66 = alloca [1 x i32], i32 1
  %67 = getelementptr [1 x i32], [1 x i32]* %65, i32 0, i32 0
  %68 = getelementptr [2 x i32], [2 x i32]* %59, i32 0, i32 0
  %69 = load i32, i32* %68
  store i32 %69, i32* %67
  %70 = getelementptr [1 x i32], [1 x i32]* %66, i32 0, i32 0
  %71 = getelementptr [2 x i32], [2 x i32]* %59, i32 0, i32 0
  %72 = load i32, i32* %71
  store i32 %72, i32* %70
  %73 = alloca %btree_iterator_t_0, i32 1
  %74 = alloca %btree_iterator_t_0, i32 1
  %75 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %75, [1 x i32]* %65, %btree_iterator_t_0* %73)
  %76 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %76, [1 x i32]* %66, %btree_iterator_t_0* %74)
  br label %loop_3
loop_3:
  %77 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %73, %btree_iterator_t_0* %74)
  br i1 %77, label %if_6, label %end_if_5
if_6:
  br label %range_query.end_3
end_if_5:
  %78 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %73)
  %79 = alloca [1 x i32], i32 1
  %80 = getelementptr [1 x i32], [1 x i32]* %79, i32 0, i32 0
  %81 = getelementptr [2 x i32], [2 x i32]* %59, i32 0, i32 0
  %82 = load i32, i32* %81
  store i32 %82, i32* %80
  %83 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %84 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %83, [1 x i32]* %79)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %73)
  br label %loop_3
range_query.end_3:
  br label %end_if_6
end_if_6:
  call ccc void @eclair_btree_iterator_next_1(%btree_iterator_t_1* %54)
  br label %loop_2
range_query.end_2:
  ret void
}
