// RUN: split-file %s %t

// RUN: %eclair compile --emit ra %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def fact1(u32, u32) input.
@def fact2(u32, u32) output.

fact2(x, 1) :-
  z = x,
  fact1(x, z),
  y = 123,
  fact1(y, x).

fact2(x, y) :-
  123 = x,
  fact1(y, x).

fact2(x, y) :-
  123 < x,
  123 <= x,
  123 > x,
  123 >= x,
  123 != x,
  fact1(y, x).

//--- expected_ra.out
search fact1 as fact10 do
  if 123 < fact10[1] do
    if 123 <= fact10[1] do
      if 123 > fact10[1] do
        if 123 >= fact10[1] do
          if 123 != fact10[1] do
            project (fact10[1], fact10[0]) into fact2
search fact1 as fact10 where (123 = fact10[1]) do
  project (fact10[1], fact10[0]) into fact2
search fact1 as fact10 do
  if fact10[0] = fact10[1] do
    search fact1 as fact11 where (fact11[0] = 123 and fact10[0] = fact11[1]) do
      project (fact10[0], 1) into fact2
//--- expected_eir.out
declare_type Program
{
  symbol_table
  fact1 btree(num_columns=2, index=[1,0], block_size=256, search_type=linear)
  fact2 btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  fact1.init_empty(program.1)
  fact2.init_empty(program.2)
  symbol_table.insert(program.0, fact1)
  symbol_table.insert(program.0, fact2)
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  fact1.destroy(FN_ARG[0].1)
  fact2.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = fact1.stack_allocate Value
  value.0 = 0
  value.1 = 0
  value_1 = fact1.stack_allocate Value
  value_1.0 = 4294967295
  value_1.1 = 4294967295
  begin_iter = fact1.stack_allocate Iter
  end_iter = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, value, begin_iter)
  fact1.iter_upper_bound(FN_ARG[0].1, value_1, end_iter)
  loop
  {
    condition = fact1.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = fact1.iter_current(begin_iter)
    condition_1 = (123 < current.1)
    if (condition_1)
    {
      condition_2 = (123 <= current.1)
      if (condition_2)
      {
        condition_3 = (123 > current.1)
        if (condition_3)
        {
          condition_4 = (123 >= current.1)
          if (condition_4)
          {
            condition_5 = (123 != current.1)
            if (condition_5)
            {
              value_2 = fact2.stack_allocate Value
              value_2.0 = current.1
              value_2.1 = current.0
              fact2.insert(FN_ARG[0].2, value_2)
            }
          }
        }
      }
    }
    fact1.iter_next(begin_iter)
  }
  range_query.end:
  value_3 = fact1.stack_allocate Value
  value_3.0 = 0
  value_3.1 = 123
  value_4 = fact1.stack_allocate Value
  value_4.0 = 4294967295
  value_4.1 = 123
  begin_iter_1 = fact1.stack_allocate Iter
  end_iter_1 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, value_3, begin_iter_1)
  fact1.iter_upper_bound(FN_ARG[0].1, value_4, end_iter_1)
  loop
  {
    condition_6 = fact1.iter_is_equal(begin_iter_1, end_iter_1)
    if (condition_6)
    {
      goto range_query.end_1
    }
    current_1 = fact1.iter_current(begin_iter_1)
    value_5 = fact2.stack_allocate Value
    value_5.0 = current_1.1
    value_5.1 = current_1.0
    fact2.insert(FN_ARG[0].2, value_5)
    fact1.iter_next(begin_iter_1)
  }
  range_query.end_1:
  value_6 = fact1.stack_allocate Value
  value_6.0 = 0
  value_6.1 = 0
  value_7 = fact1.stack_allocate Value
  value_7.0 = 4294967295
  value_7.1 = 4294967295
  begin_iter_2 = fact1.stack_allocate Iter
  end_iter_2 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, value_6, begin_iter_2)
  fact1.iter_upper_bound(FN_ARG[0].1, value_7, end_iter_2)
  loop
  {
    condition_7 = fact1.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_7)
    {
      goto range_query.end_2
    }
    current_2 = fact1.iter_current(begin_iter_2)
    condition_8 = (current_2.0 == current_2.1)
    if (condition_8)
    {
      value_8 = fact1.stack_allocate Value
      value_8.0 = 123
      value_8.1 = current_2.0
      value_9 = fact1.stack_allocate Value
      value_9.0 = 123
      value_9.1 = current_2.0
      begin_iter_3 = fact1.stack_allocate Iter
      end_iter_3 = fact1.stack_allocate Iter
      fact1.iter_lower_bound(FN_ARG[0].1, value_8, begin_iter_3)
      fact1.iter_upper_bound(FN_ARG[0].1, value_9, end_iter_3)
      loop
      {
        condition_9 = fact1.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_9)
        {
          goto range_query.end_3
        }
        current_3 = fact1.iter_current(begin_iter_3)
        value_10 = fact2.stack_allocate Value
        value_10.0 = current_2.0
        value_10.1 = 1
        fact2.insert(FN_ARG[0].2, value_10)
        fact1.iter_next(begin_iter_3)
      }
      range_query.end_3:
    }
    fact1.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %value_0 = alloca [2 x i32], i32 1
  %0 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 0
  store i32 0, i32* %0
  %1 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 1
  store i32 0, i32* %1
  %value_1_0 = alloca [2 x i32], i32 1
  %2 = getelementptr [2 x i32], [2 x i32]* %value_1_0, i32 0, i32 0
  store i32 4294967295, i32* %2
  %3 = getelementptr [2 x i32], [2 x i32]* %value_1_0, i32 0, i32 1
  store i32 4294967295, i32* %3
  %begin_iter_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_0 = alloca %btree_iterator_t_0, i32 1
  %4 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %4, [2 x i32]* %value_0, %btree_iterator_t_0* %begin_iter_0)
  %5 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %5, [2 x i32]* %value_1_0, %btree_iterator_t_0* %end_iter_0)
  br label %loop_0
loop_0:
  %condition_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_0, %btree_iterator_t_0* %end_iter_0)
  br i1 %condition_0, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %current_0 = call ccc [2 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_0)
  %condition_1_0 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %condition_1_1 = load i32, i32* %condition_1_0
  %condition_1_2 = icmp ult i32 123, %condition_1_1
  br i1 %condition_1_2, label %if_1, label %end_if_5
if_1:
  %condition_2_0 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %condition_2_1 = load i32, i32* %condition_2_0
  %condition_2_2 = icmp ule i32 123, %condition_2_1
  br i1 %condition_2_2, label %if_2, label %end_if_4
if_2:
  %condition_3_0 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %condition_3_1 = load i32, i32* %condition_3_0
  %condition_3_2 = icmp ugt i32 123, %condition_3_1
  br i1 %condition_3_2, label %if_3, label %end_if_3
if_3:
  %condition_4_0 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %condition_4_1 = load i32, i32* %condition_4_0
  %condition_4_2 = icmp uge i32 123, %condition_4_1
  br i1 %condition_4_2, label %if_4, label %end_if_2
if_4:
  %condition_5_0 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %condition_5_1 = load i32, i32* %condition_5_0
  %condition_5_2 = icmp ne i32 123, %condition_5_1
  br i1 %condition_5_2, label %if_5, label %end_if_1
if_5:
  %value_2_0 = alloca [2 x i32], i32 1
  %6 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 0
  %7 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %8 = load i32, i32* %7
  store i32 %8, i32* %6
  %9 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 1
  %10 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 0
  %11 = load i32, i32* %10
  store i32 %11, i32* %9
  %12 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %13 = call ccc i1 @btree_insert_value_1(%btree_t_1* %12, [2 x i32]* %value_2_0)
  br label %end_if_1
end_if_1:
  br label %end_if_2
end_if_2:
  br label %end_if_3
end_if_3:
  br label %end_if_4
end_if_4:
  br label %end_if_5
end_if_5:
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_0)
  br label %loop_0
range_query.end:
  %value_3_0 = alloca [2 x i32], i32 1
  %14 = getelementptr [2 x i32], [2 x i32]* %value_3_0, i32 0, i32 0
  store i32 0, i32* %14
  %15 = getelementptr [2 x i32], [2 x i32]* %value_3_0, i32 0, i32 1
  store i32 123, i32* %15
  %value_4_0 = alloca [2 x i32], i32 1
  %16 = getelementptr [2 x i32], [2 x i32]* %value_4_0, i32 0, i32 0
  store i32 4294967295, i32* %16
  %17 = getelementptr [2 x i32], [2 x i32]* %value_4_0, i32 0, i32 1
  store i32 123, i32* %17
  %begin_iter_1_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_1_0 = alloca %btree_iterator_t_0, i32 1
  %18 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %18, [2 x i32]* %value_3_0, %btree_iterator_t_0* %begin_iter_1_0)
  %19 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %19, [2 x i32]* %value_4_0, %btree_iterator_t_0* %end_iter_1_0)
  br label %loop_1
loop_1:
  %condition_6_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_1_0, %btree_iterator_t_0* %end_iter_1_0)
  br i1 %condition_6_0, label %if_6, label %end_if_6
if_6:
  br label %range_query.end_1
end_if_6:
  %current_1_0 = call ccc [2 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_1_0)
  %value_5_0 = alloca [2 x i32], i32 1
  %20 = getelementptr [2 x i32], [2 x i32]* %value_5_0, i32 0, i32 0
  %21 = getelementptr [2 x i32], [2 x i32]* %current_1_0, i32 0, i32 1
  %22 = load i32, i32* %21
  store i32 %22, i32* %20
  %23 = getelementptr [2 x i32], [2 x i32]* %value_5_0, i32 0, i32 1
  %24 = getelementptr [2 x i32], [2 x i32]* %current_1_0, i32 0, i32 0
  %25 = load i32, i32* %24
  store i32 %25, i32* %23
  %26 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %27 = call ccc i1 @btree_insert_value_1(%btree_t_1* %26, [2 x i32]* %value_5_0)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_1_0)
  br label %loop_1
range_query.end_1:
  %value_6_0 = alloca [2 x i32], i32 1
  %28 = getelementptr [2 x i32], [2 x i32]* %value_6_0, i32 0, i32 0
  store i32 0, i32* %28
  %29 = getelementptr [2 x i32], [2 x i32]* %value_6_0, i32 0, i32 1
  store i32 0, i32* %29
  %value_7_0 = alloca [2 x i32], i32 1
  %30 = getelementptr [2 x i32], [2 x i32]* %value_7_0, i32 0, i32 0
  store i32 4294967295, i32* %30
  %31 = getelementptr [2 x i32], [2 x i32]* %value_7_0, i32 0, i32 1
  store i32 4294967295, i32* %31
  %begin_iter_2_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_2_0 = alloca %btree_iterator_t_0, i32 1
  %32 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %32, [2 x i32]* %value_6_0, %btree_iterator_t_0* %begin_iter_2_0)
  %33 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %33, [2 x i32]* %value_7_0, %btree_iterator_t_0* %end_iter_2_0)
  br label %loop_2
loop_2:
  %condition_7_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_2_0, %btree_iterator_t_0* %end_iter_2_0)
  br i1 %condition_7_0, label %if_7, label %end_if_7
if_7:
  br label %range_query.end_2
end_if_7:
  %current_2_0 = call ccc [2 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_2_0)
  %condition_8_0 = getelementptr [2 x i32], [2 x i32]* %current_2_0, i32 0, i32 0
  %condition_8_1 = load i32, i32* %condition_8_0
  %condition_8_2 = getelementptr [2 x i32], [2 x i32]* %current_2_0, i32 0, i32 1
  %condition_8_3 = load i32, i32* %condition_8_2
  %condition_8_4 = icmp eq i32 %condition_8_1, %condition_8_3
  br i1 %condition_8_4, label %if_8, label %end_if_9
if_8:
  %value_8_0 = alloca [2 x i32], i32 1
  %34 = getelementptr [2 x i32], [2 x i32]* %value_8_0, i32 0, i32 0
  store i32 123, i32* %34
  %35 = getelementptr [2 x i32], [2 x i32]* %value_8_0, i32 0, i32 1
  %36 = getelementptr [2 x i32], [2 x i32]* %current_2_0, i32 0, i32 0
  %37 = load i32, i32* %36
  store i32 %37, i32* %35
  %value_9_0 = alloca [2 x i32], i32 1
  %38 = getelementptr [2 x i32], [2 x i32]* %value_9_0, i32 0, i32 0
  store i32 123, i32* %38
  %39 = getelementptr [2 x i32], [2 x i32]* %value_9_0, i32 0, i32 1
  %40 = getelementptr [2 x i32], [2 x i32]* %current_2_0, i32 0, i32 0
  %41 = load i32, i32* %40
  store i32 %41, i32* %39
  %begin_iter_3_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_3_0 = alloca %btree_iterator_t_0, i32 1
  %42 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %42, [2 x i32]* %value_8_0, %btree_iterator_t_0* %begin_iter_3_0)
  %43 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %43, [2 x i32]* %value_9_0, %btree_iterator_t_0* %end_iter_3_0)
  br label %loop_3
loop_3:
  %condition_9_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_3_0, %btree_iterator_t_0* %end_iter_3_0)
  br i1 %condition_9_0, label %if_9, label %end_if_8
if_9:
  br label %range_query.end_3
end_if_8:
  %current_3_0 = call ccc [2 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_3_0)
  %value_10_0 = alloca [2 x i32], i32 1
  %44 = getelementptr [2 x i32], [2 x i32]* %value_10_0, i32 0, i32 0
  %45 = getelementptr [2 x i32], [2 x i32]* %current_2_0, i32 0, i32 0
  %46 = load i32, i32* %45
  store i32 %46, i32* %44
  %47 = getelementptr [2 x i32], [2 x i32]* %value_10_0, i32 0, i32 1
  store i32 1, i32* %47
  %48 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %49 = call ccc i1 @btree_insert_value_1(%btree_t_1* %48, [2 x i32]* %value_10_0)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_3_0)
  br label %loop_3
range_query.end_3:
  br label %end_if_9
end_if_9:
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_2_0)
  br label %loop_2
range_query.end_2:
  ret void
}
