// TODO variant where one is recursive
// TODO tests for rules with >2 clauses, ...

// RUN: split-file %s %t

// RUN: %eclair compile --emit ra %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

//--- program.eclair
@def a(u32).
@def b(u32).
@def c(u32).
@def d(u32).

a(x) :- b(x), c(x).
b(1).
b(x) :- c(x), d(x).
c(2).
c(x) :- b(x), d(x).
d(3).

//--- expected_ra.out
project (3) into d
project (2) into c
project (1) into b
merge c delta_c
merge b delta_b
loop do
  purge new_c
  purge new_b
  parallel do
    search b as b0 do
      search d as d1 where (d1[0] = b0[0] and (b0[0]) ∉ c) do
        project (b0[0]) into new_c
    search c as c0 do
      search d as d1 where (d1[0] = c0[0] and (c0[0]) ∉ b) do
        project (c0[0]) into new_b
  exit if counttuples(new_c) = 0 and counttuples(new_b) = 0
  merge new_c c
  swap new_c delta_c
  merge new_b b
  swap new_b delta_b
search b as b0 do
  search c as c1 where (c1[0] = b0[0]) do
    project (b0[0]) into a
//--- expected_eir.out
declare_type Program
{
  symbol_table
  a btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  d btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  delta_b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  delta_c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  new_b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  new_c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
}

fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  a.init_empty(program.1)
  b.init_empty(program.2)
  c.init_empty(program.3)
  d.init_empty(program.4)
  delta_b.init_empty(program.5)
  delta_c.init_empty(program.6)
  new_b.init_empty(program.7)
  new_c.init_empty(program.8)
  return program
}

fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  a.destroy(FN_ARG[0].1)
  b.destroy(FN_ARG[0].2)
  c.destroy(FN_ARG[0].3)
  d.destroy(FN_ARG[0].4)
  delta_b.destroy(FN_ARG[0].5)
  delta_c.destroy(FN_ARG[0].6)
  new_b.destroy(FN_ARG[0].7)
  new_c.destroy(FN_ARG[0].8)
  free_program(FN_ARG[0])
}

fn eclair_program_run(*Program) -> Void
{
  value = d.stack_allocate Value
  value.0 = 3
  d.insert(FN_ARG[0].4, value)
  value_1 = c.stack_allocate Value
  value_1.0 = 2
  c.insert(FN_ARG[0].3, value_1)
  value_2 = b.stack_allocate Value
  value_2.0 = 1
  b.insert(FN_ARG[0].2, value_2)
  begin_iter = c.stack_allocate Iter
  end_iter = c.stack_allocate Iter
  c.iter_begin(FN_ARG[0].3, begin_iter)
  c.iter_end(FN_ARG[0].3, end_iter)
  delta_c.insert_range<c[0]>(FN_ARG[0].6, begin_iter, end_iter)
  begin_iter_1 = b.stack_allocate Iter
  end_iter_1 = b.stack_allocate Iter
  b.iter_begin(FN_ARG[0].2, begin_iter_1)
  b.iter_end(FN_ARG[0].2, end_iter_1)
  delta_b.insert_range<b[0]>(FN_ARG[0].5, begin_iter_1, end_iter_1)
  loop
  {
    new_c.purge(FN_ARG[0].8)
    new_b.purge(FN_ARG[0].7)
    parallel
    {
      value_3 = b.stack_allocate Value
      value_3.0 = 0
      value_4 = b.stack_allocate Value
      value_4.0 = 4294967295
      begin_iter_2 = b.stack_allocate Iter
      end_iter_2 = b.stack_allocate Iter
      b.iter_lower_bound(FN_ARG[0].2, value_3, begin_iter_2)
      b.iter_upper_bound(FN_ARG[0].2, value_4, end_iter_2)
      loop
      {
        condition = b.iter_is_equal(begin_iter_2, end_iter_2)
        if (condition)
        {
          goto range_query.end
        }
        current = b.iter_current(begin_iter_2)
        value_5 = d.stack_allocate Value
        value_5.0 = current.0
        value_6 = d.stack_allocate Value
        value_6.0 = current.0
        begin_iter_3 = d.stack_allocate Iter
        end_iter_3 = d.stack_allocate Iter
        d.iter_lower_bound(FN_ARG[0].4, value_5, begin_iter_3)
        d.iter_upper_bound(FN_ARG[0].4, value_6, end_iter_3)
        loop
        {
          condition_1 = d.iter_is_equal(begin_iter_3, end_iter_3)
          if (condition_1)
          {
            goto range_query.end_1
          }
          current_1 = d.iter_current(begin_iter_3)
          value_7 = c.stack_allocate Value
          value_7.0 = current.0
          contains_result = c.contains(FN_ARG[0].3, value_7)
          condition_2 = not contains_result
          if (condition_2)
          {
            value_8 = c.stack_allocate Value
            value_8.0 = current.0
            new_c.insert(FN_ARG[0].8, value_8)
          }
          d.iter_next(begin_iter_3)
        }
        range_query.end_1:
        b.iter_next(begin_iter_2)
      }
      range_query.end:
      value_9 = c.stack_allocate Value
      value_9.0 = 0
      value_10 = c.stack_allocate Value
      value_10.0 = 4294967295
      begin_iter_4 = c.stack_allocate Iter
      end_iter_4 = c.stack_allocate Iter
      c.iter_lower_bound(FN_ARG[0].3, value_9, begin_iter_4)
      c.iter_upper_bound(FN_ARG[0].3, value_10, end_iter_4)
      loop
      {
        condition_3 = c.iter_is_equal(begin_iter_4, end_iter_4)
        if (condition_3)
        {
          goto range_query.end_2
        }
        current_2 = c.iter_current(begin_iter_4)
        value_11 = d.stack_allocate Value
        value_11.0 = current_2.0
        value_12 = d.stack_allocate Value
        value_12.0 = current_2.0
        begin_iter_5 = d.stack_allocate Iter
        end_iter_5 = d.stack_allocate Iter
        d.iter_lower_bound(FN_ARG[0].4, value_11, begin_iter_5)
        d.iter_upper_bound(FN_ARG[0].4, value_12, end_iter_5)
        loop
        {
          condition_4 = d.iter_is_equal(begin_iter_5, end_iter_5)
          if (condition_4)
          {
            goto range_query.end_3
          }
          current_3 = d.iter_current(begin_iter_5)
          value_13 = b.stack_allocate Value
          value_13.0 = current_2.0
          contains_result_1 = b.contains(FN_ARG[0].2, value_13)
          condition_5 = not contains_result_1
          if (condition_5)
          {
            value_14 = b.stack_allocate Value
            value_14.0 = current_2.0
            new_b.insert(FN_ARG[0].7, value_14)
          }
          d.iter_next(begin_iter_5)
        }
        range_query.end_3:
        c.iter_next(begin_iter_4)
      }
      range_query.end_2:
    }
    condition_6 = new_b.is_empty(FN_ARG[0].7)
    if (condition_6)
    {
      condition_7 = new_c.is_empty(FN_ARG[0].8)
      if (condition_7)
      {
        goto loop.end
      }
    }
    begin_iter_6 = c.stack_allocate Iter
    end_iter_6 = c.stack_allocate Iter
    new_c.iter_begin(FN_ARG[0].8, begin_iter_6)
    new_c.iter_end(FN_ARG[0].8, end_iter_6)
    c.insert_range<new_c[0]>(FN_ARG[0].3, begin_iter_6, end_iter_6)
    new_c.swap(FN_ARG[0].8, FN_ARG[0].6)
    begin_iter_7 = b.stack_allocate Iter
    end_iter_7 = b.stack_allocate Iter
    new_b.iter_begin(FN_ARG[0].7, begin_iter_7)
    new_b.iter_end(FN_ARG[0].7, end_iter_7)
    b.insert_range<new_b[0]>(FN_ARG[0].2, begin_iter_7, end_iter_7)
    new_b.swap(FN_ARG[0].7, FN_ARG[0].5)
  }
  loop.end:
  value_15 = b.stack_allocate Value
  value_15.0 = 0
  value_16 = b.stack_allocate Value
  value_16.0 = 4294967295
  begin_iter_8 = b.stack_allocate Iter
  end_iter_8 = b.stack_allocate Iter
  b.iter_lower_bound(FN_ARG[0].2, value_15, begin_iter_8)
  b.iter_upper_bound(FN_ARG[0].2, value_16, end_iter_8)
  loop
  {
    condition_8 = b.iter_is_equal(begin_iter_8, end_iter_8)
    if (condition_8)
    {
      goto range_query.end_4
    }
    current_4 = b.iter_current(begin_iter_8)
    value_17 = c.stack_allocate Value
    value_17.0 = current_4.0
    value_18 = c.stack_allocate Value
    value_18.0 = current_4.0
    begin_iter_9 = c.stack_allocate Iter
    end_iter_9 = c.stack_allocate Iter
    c.iter_lower_bound(FN_ARG[0].3, value_17, begin_iter_9)
    c.iter_upper_bound(FN_ARG[0].3, value_18, end_iter_9)
    loop
    {
      condition_9 = c.iter_is_equal(begin_iter_9, end_iter_9)
      if (condition_9)
      {
        goto range_query.end_5
      }
      current_5 = c.iter_current(begin_iter_9)
      value_19 = a.stack_allocate Value
      value_19.0 = current_4.0
      a.insert(FN_ARG[0].1, value_19)
      c.iter_next(begin_iter_9)
    }
    range_query.end_5:
    b.iter_next(begin_iter_8)
  }
  range_query.end_4:
}
