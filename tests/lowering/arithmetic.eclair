// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn.*eclair_program_run" > %t/actual_eir_snippet.out
// RUN: diff %t/expected_eir.out %t/actual_eir_snippet.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def fact1(u32) input.
@def fact2(u32) output.

fact2(y) :-
  fact1(x),
  y = x + 3.

fact2(x + 3) :-
  fact1(x).

fact2((x + 1) + 2 * x) :-
  fact1(x).

fact2(x) :-
  fact1(x),
  fact1(x + 4),
  fact1(x + 4).

fact2((8 - x) / x) :-
  fact1(x).

//--- expected_ra.out
search fact1 as fact10 do
  project (((8 - fact10[0]) / fact10[0])) into fact2
search fact1 as fact10 do
  search fact1 as fact11 where (fact11[0] = (fact10[0] + 4)) do
    search fact1 as fact12 where (fact12[0] = (fact10[0] + 4)) do
      project (fact10[0]) into fact2
search fact1 as fact10 do
  project (((fact10[0] + 1) + (2 * fact10[0]))) into fact2
search fact1 as fact10 do
  project ((fact10[0] + 3)) into fact2
search fact1 as fact10 do
  project ((fact10[0] + 3)) into fact2
//--- expected_eir.out
export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = fact1.stack_allocate Value
  upper_bound_value = fact1.stack_allocate Value
  lower_bound_value.0 = 0
  upper_bound_value.0 = 4294967295
  begin_iter = fact1.stack_allocate Iter
  end_iter = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = fact1.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = fact1.iter_current(begin_iter)
    value = fact2.stack_allocate Value
    value.0 = ((8 - current.0) / current.0)
    fact2.insert(FN_ARG[0].2, value)
    fact1.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_1 = fact1.stack_allocate Value
  upper_bound_value_1 = fact1.stack_allocate Value
  lower_bound_value_1.0 = 0
  upper_bound_value_1.0 = 4294967295
  begin_iter_1 = fact1.stack_allocate Iter
  end_iter_1 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_1, begin_iter_1)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_1, end_iter_1)
  loop
  {
    condition_1 = fact1.iter_is_equal(begin_iter_1, end_iter_1)
    if (condition_1)
    {
      goto range_query.end_1
    }
    current_1 = fact1.iter_current(begin_iter_1)
    lower_bound_value_2 = fact1.stack_allocate Value
    upper_bound_value_2 = fact1.stack_allocate Value
    lower_bound_value_2.0 = (current_1.0 + 4)
    upper_bound_value_2.0 = (current_1.0 + 4)
    begin_iter_2 = fact1.stack_allocate Iter
    end_iter_2 = fact1.stack_allocate Iter
    fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_2)
    fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_2)
    loop
    {
      condition_2 = fact1.iter_is_equal(begin_iter_2, end_iter_2)
      if (condition_2)
      {
        goto range_query.end_2
      }
      current_2 = fact1.iter_current(begin_iter_2)
      lower_bound_value_3 = fact1.stack_allocate Value
      upper_bound_value_3 = fact1.stack_allocate Value
      lower_bound_value_3.0 = (current_1.0 + 4)
      upper_bound_value_3.0 = (current_1.0 + 4)
      begin_iter_3 = fact1.stack_allocate Iter
      end_iter_3 = fact1.stack_allocate Iter
      fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_3, begin_iter_3)
      fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_3, end_iter_3)
      loop
      {
        condition_3 = fact1.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_3)
        {
          goto range_query.end_3
        }
        current_3 = fact1.iter_current(begin_iter_3)
        value_1 = fact2.stack_allocate Value
        value_1.0 = current_1.0
        fact2.insert(FN_ARG[0].2, value_1)
        fact1.iter_next(begin_iter_3)
      }
      range_query.end_3:
      fact1.iter_next(begin_iter_2)
    }
    range_query.end_2:
    fact1.iter_next(begin_iter_1)
  }
  range_query.end_1:
  lower_bound_value_4 = fact1.stack_allocate Value
  upper_bound_value_4 = fact1.stack_allocate Value
  lower_bound_value_4.0 = 0
  upper_bound_value_4.0 = 4294967295
  begin_iter_4 = fact1.stack_allocate Iter
  end_iter_4 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_4, begin_iter_4)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_4, end_iter_4)
  loop
  {
    condition_4 = fact1.iter_is_equal(begin_iter_4, end_iter_4)
    if (condition_4)
    {
      goto range_query.end_4
    }
    current_4 = fact1.iter_current(begin_iter_4)
    value_2 = fact2.stack_allocate Value
    value_2.0 = ((current_4.0 + 1) + (2 * current_4.0))
    fact2.insert(FN_ARG[0].2, value_2)
    fact1.iter_next(begin_iter_4)
  }
  range_query.end_4:
  lower_bound_value_5 = fact1.stack_allocate Value
  upper_bound_value_5 = fact1.stack_allocate Value
  lower_bound_value_5.0 = 0
  upper_bound_value_5.0 = 4294967295
  begin_iter_5 = fact1.stack_allocate Iter
  end_iter_5 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_5, begin_iter_5)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_5, end_iter_5)
  loop
  {
    condition_5 = fact1.iter_is_equal(begin_iter_5, end_iter_5)
    if (condition_5)
    {
      goto range_query.end_5
    }
    current_5 = fact1.iter_current(begin_iter_5)
    value_3 = fact2.stack_allocate Value
    value_3.0 = (current_5.0 + 3)
    fact2.insert(FN_ARG[0].2, value_3)
    fact1.iter_next(begin_iter_5)
  }
  range_query.end_5:
  lower_bound_value_6 = fact1.stack_allocate Value
  upper_bound_value_6 = fact1.stack_allocate Value
  lower_bound_value_6.0 = 0
  upper_bound_value_6.0 = 4294967295
  begin_iter_6 = fact1.stack_allocate Iter
  end_iter_6 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_6, begin_iter_6)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_6, end_iter_6)
  loop
  {
    condition_6 = fact1.iter_is_equal(begin_iter_6, end_iter_6)
    if (condition_6)
    {
      goto range_query.end_6
    }
    current_6 = fact1.iter_current(begin_iter_6)
    value_4 = fact2.stack_allocate Value
    value_4.0 = (current_6.0 + 3)
    fact2.insert(FN_ARG[0].2, value_4)
    fact1.iter_next(begin_iter_6)
  }
  range_query.end_6:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %0 = alloca [1 x i32], i32 1
  %1 = alloca [1 x i32], i32 1
  %2 = getelementptr [1 x i32], [1 x i32]* %0, i32 0, i32 0
  store i32 0, i32* %2
  %3 = getelementptr [1 x i32], [1 x i32]* %1, i32 0, i32 0
  store i32 4294967295, i32* %3
  %4 = alloca %btree_iterator_t_0, i32 1
  %5 = alloca %btree_iterator_t_0, i32 1
  %6 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %6, [1 x i32]* %0, %btree_iterator_t_0* %4)
  %7 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %7, [1 x i32]* %1, %btree_iterator_t_0* %5)
  br label %loop_0
loop_0:
  %8 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %4, %btree_iterator_t_0* %5)
  br i1 %8, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %9 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %4)
  %10 = alloca [1 x i32], i32 1
  %11 = getelementptr [1 x i32], [1 x i32]* %10, i32 0, i32 0
  %12 = getelementptr [1 x i32], [1 x i32]* %9, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = sub i32 8, %13
  %15 = getelementptr [1 x i32], [1 x i32]* %9, i32 0, i32 0
  %16 = load i32, i32* %15
  %17 = udiv i32 %14, %16
  store i32 %17, i32* %11
  %18 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %19 = call ccc i1 @btree_insert_value_0(%btree_t_0* %18, [1 x i32]* %10)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %4)
  br label %loop_0
range_query.end:
  %20 = alloca [1 x i32], i32 1
  %21 = alloca [1 x i32], i32 1
  %22 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  store i32 0, i32* %22
  %23 = getelementptr [1 x i32], [1 x i32]* %21, i32 0, i32 0
  store i32 4294967295, i32* %23
  %24 = alloca %btree_iterator_t_0, i32 1
  %25 = alloca %btree_iterator_t_0, i32 1
  %26 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %26, [1 x i32]* %20, %btree_iterator_t_0* %24)
  %27 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %27, [1 x i32]* %21, %btree_iterator_t_0* %25)
  br label %loop_1
loop_1:
  %28 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %24, %btree_iterator_t_0* %25)
  br i1 %28, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %29 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %24)
  %30 = alloca [1 x i32], i32 1
  %31 = alloca [1 x i32], i32 1
  %32 = getelementptr [1 x i32], [1 x i32]* %30, i32 0, i32 0
  %33 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %34 = load i32, i32* %33
  %35 = add i32 %34, 4
  store i32 %35, i32* %32
  %36 = getelementptr [1 x i32], [1 x i32]* %31, i32 0, i32 0
  %37 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %38 = load i32, i32* %37
  %39 = add i32 %38, 4
  store i32 %39, i32* %36
  %40 = alloca %btree_iterator_t_0, i32 1
  %41 = alloca %btree_iterator_t_0, i32 1
  %42 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %42, [1 x i32]* %30, %btree_iterator_t_0* %40)
  %43 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %43, [1 x i32]* %31, %btree_iterator_t_0* %41)
  br label %loop_2
loop_2:
  %44 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %40, %btree_iterator_t_0* %41)
  br i1 %44, label %if_2, label %end_if_2
if_2:
  br label %range_query.end_2
end_if_2:
  %45 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %40)
  %46 = alloca [1 x i32], i32 1
  %47 = alloca [1 x i32], i32 1
  %48 = getelementptr [1 x i32], [1 x i32]* %46, i32 0, i32 0
  %49 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %50 = load i32, i32* %49
  %51 = add i32 %50, 4
  store i32 %51, i32* %48
  %52 = getelementptr [1 x i32], [1 x i32]* %47, i32 0, i32 0
  %53 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %54 = load i32, i32* %53
  %55 = add i32 %54, 4
  store i32 %55, i32* %52
  %56 = alloca %btree_iterator_t_0, i32 1
  %57 = alloca %btree_iterator_t_0, i32 1
  %58 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %58, [1 x i32]* %46, %btree_iterator_t_0* %56)
  %59 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %59, [1 x i32]* %47, %btree_iterator_t_0* %57)
  br label %loop_3
loop_3:
  %60 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %56, %btree_iterator_t_0* %57)
  br i1 %60, label %if_3, label %end_if_3
if_3:
  br label %range_query.end_3
end_if_3:
  %61 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %56)
  %62 = alloca [1 x i32], i32 1
  %63 = getelementptr [1 x i32], [1 x i32]* %62, i32 0, i32 0
  %64 = getelementptr [1 x i32], [1 x i32]* %29, i32 0, i32 0
  %65 = load i32, i32* %64
  store i32 %65, i32* %63
  %66 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %67 = call ccc i1 @btree_insert_value_0(%btree_t_0* %66, [1 x i32]* %62)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %56)
  br label %loop_3
range_query.end_3:
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %40)
  br label %loop_2
range_query.end_2:
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %24)
  br label %loop_1
range_query.end_1:
  %68 = alloca [1 x i32], i32 1
  %69 = alloca [1 x i32], i32 1
  %70 = getelementptr [1 x i32], [1 x i32]* %68, i32 0, i32 0
  store i32 0, i32* %70
  %71 = getelementptr [1 x i32], [1 x i32]* %69, i32 0, i32 0
  store i32 4294967295, i32* %71
  %72 = alloca %btree_iterator_t_0, i32 1
  %73 = alloca %btree_iterator_t_0, i32 1
  %74 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %74, [1 x i32]* %68, %btree_iterator_t_0* %72)
  %75 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %75, [1 x i32]* %69, %btree_iterator_t_0* %73)
  br label %loop_4
loop_4:
  %76 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %72, %btree_iterator_t_0* %73)
  br i1 %76, label %if_4, label %end_if_4
if_4:
  br label %range_query.end_4
end_if_4:
  %77 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %72)
  %78 = alloca [1 x i32], i32 1
  %79 = getelementptr [1 x i32], [1 x i32]* %78, i32 0, i32 0
  %80 = getelementptr [1 x i32], [1 x i32]* %77, i32 0, i32 0
  %81 = load i32, i32* %80
  %82 = add i32 %81, 1
  %83 = getelementptr [1 x i32], [1 x i32]* %77, i32 0, i32 0
  %84 = load i32, i32* %83
  %85 = mul i32 2, %84
  %86 = add i32 %82, %85
  store i32 %86, i32* %79
  %87 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %88 = call ccc i1 @btree_insert_value_0(%btree_t_0* %87, [1 x i32]* %78)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %72)
  br label %loop_4
range_query.end_4:
  %89 = alloca [1 x i32], i32 1
  %90 = alloca [1 x i32], i32 1
  %91 = getelementptr [1 x i32], [1 x i32]* %89, i32 0, i32 0
  store i32 0, i32* %91
  %92 = getelementptr [1 x i32], [1 x i32]* %90, i32 0, i32 0
  store i32 4294967295, i32* %92
  %93 = alloca %btree_iterator_t_0, i32 1
  %94 = alloca %btree_iterator_t_0, i32 1
  %95 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %95, [1 x i32]* %89, %btree_iterator_t_0* %93)
  %96 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %96, [1 x i32]* %90, %btree_iterator_t_0* %94)
  br label %loop_5
loop_5:
  %97 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %93, %btree_iterator_t_0* %94)
  br i1 %97, label %if_5, label %end_if_5
if_5:
  br label %range_query.end_5
end_if_5:
  %98 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %93)
  %99 = alloca [1 x i32], i32 1
  %100 = getelementptr [1 x i32], [1 x i32]* %99, i32 0, i32 0
  %101 = getelementptr [1 x i32], [1 x i32]* %98, i32 0, i32 0
  %102 = load i32, i32* %101
  %103 = add i32 %102, 3
  store i32 %103, i32* %100
  %104 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %105 = call ccc i1 @btree_insert_value_0(%btree_t_0* %104, [1 x i32]* %99)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %93)
  br label %loop_5
range_query.end_5:
  %106 = alloca [1 x i32], i32 1
  %107 = alloca [1 x i32], i32 1
  %108 = getelementptr [1 x i32], [1 x i32]* %106, i32 0, i32 0
  store i32 0, i32* %108
  %109 = getelementptr [1 x i32], [1 x i32]* %107, i32 0, i32 0
  store i32 4294967295, i32* %109
  %110 = alloca %btree_iterator_t_0, i32 1
  %111 = alloca %btree_iterator_t_0, i32 1
  %112 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %112, [1 x i32]* %106, %btree_iterator_t_0* %110)
  %113 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %113, [1 x i32]* %107, %btree_iterator_t_0* %111)
  br label %loop_6
loop_6:
  %114 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %110, %btree_iterator_t_0* %111)
  br i1 %114, label %if_6, label %end_if_6
if_6:
  br label %range_query.end_6
end_if_6:
  %115 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %110)
  %116 = alloca [1 x i32], i32 1
  %117 = getelementptr [1 x i32], [1 x i32]* %116, i32 0, i32 0
  %118 = getelementptr [1 x i32], [1 x i32]* %115, i32 0, i32 0
  %119 = load i32, i32* %118
  %120 = add i32 %119, 3
  store i32 %120, i32* %117
  %121 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %122 = call ccc i1 @btree_insert_value_0(%btree_t_0* %121, [1 x i32]* %116)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %110)
  br label %loop_6
range_query.end_6:
  ret void
}
