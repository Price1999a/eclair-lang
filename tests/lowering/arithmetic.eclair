// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn.*eclair_program_run" > %t/actual_eir_snippet.out
// RUN: diff %t/expected_eir.out %t/actual_eir_snippet.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def fact1(u32) input.
@def fact2(u32) output.

fact2(y) :-
  fact1(x),
  y = x + 3.

fact2(x + 3) :-
  fact1(x).

fact2((x + 1) + 2 * x) :-
  fact1(x).

fact2(x) :-
  fact1(x),
  fact1(x + 4),
  fact1(x + 4).

fact2((8 - x) / x) :-
  fact1(x).

//--- expected_ra.out
search fact1 as fact10 do
  project (((8 - fact10[0]) / fact10[0])) into fact2
search fact1 as fact10 do
  search fact1 as fact11 where (fact11[0] = (fact10[0] + 4)) do
    search fact1 as fact12 where (fact12[0] = (fact10[0] + 4)) do
      project (fact10[0]) into fact2
search fact1 as fact10 do
  project (((fact10[0] + 1) + (2 * fact10[0]))) into fact2
search fact1 as fact10 do
  project ((fact10[0] + 3)) into fact2
search fact1 as fact10 do
  project ((fact10[0] + 3)) into fact2
//--- expected_eir.out
export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = fact1.stack_allocate Value
  upper_bound_value = fact1.stack_allocate Value
  lower_bound_value.0 = 0
  upper_bound_value.0 = 4294967295
  begin_iter = fact1.stack_allocate Iter
  end_iter = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = fact1.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = fact1.iter_current(begin_iter)
    value = fact2.stack_allocate Value
    value.0 = ((8 - current.0) / current.0)
    fact2.insert(FN_ARG[0].2, value)
    fact1.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_1 = fact1.stack_allocate Value
  upper_bound_value_1 = fact1.stack_allocate Value
  lower_bound_value_1.0 = 0
  upper_bound_value_1.0 = 4294967295
  begin_iter_1 = fact1.stack_allocate Iter
  end_iter_1 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_1, begin_iter_1)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_1, end_iter_1)
  loop
  {
    condition_1 = fact1.iter_is_equal(begin_iter_1, end_iter_1)
    if (condition_1)
    {
      goto range_query.end_1
    }
    current_1 = fact1.iter_current(begin_iter_1)
    lower_bound_value_2 = fact1.stack_allocate Value
    upper_bound_value_2 = fact1.stack_allocate Value
    lower_bound_value_2.0 = (current_1.0 + 4)
    upper_bound_value_2.0 = (current_1.0 + 4)
    begin_iter_2 = fact1.stack_allocate Iter
    end_iter_2 = fact1.stack_allocate Iter
    fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_2)
    fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_2)
    loop
    {
      condition_2 = fact1.iter_is_equal(begin_iter_2, end_iter_2)
      if (condition_2)
      {
        goto range_query.end_2
      }
      current_2 = fact1.iter_current(begin_iter_2)
      lower_bound_value_3 = fact1.stack_allocate Value
      upper_bound_value_3 = fact1.stack_allocate Value
      lower_bound_value_3.0 = (current_1.0 + 4)
      upper_bound_value_3.0 = (current_1.0 + 4)
      begin_iter_3 = fact1.stack_allocate Iter
      end_iter_3 = fact1.stack_allocate Iter
      fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_3, begin_iter_3)
      fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_3, end_iter_3)
      loop
      {
        condition_3 = fact1.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_3)
        {
          goto range_query.end_3
        }
        current_3 = fact1.iter_current(begin_iter_3)
        value_1 = fact2.stack_allocate Value
        value_1.0 = current_1.0
        fact2.insert(FN_ARG[0].2, value_1)
        fact1.iter_next(begin_iter_3)
      }
      range_query.end_3:
      fact1.iter_next(begin_iter_2)
    }
    range_query.end_2:
    fact1.iter_next(begin_iter_1)
  }
  range_query.end_1:
  lower_bound_value_4 = fact1.stack_allocate Value
  upper_bound_value_4 = fact1.stack_allocate Value
  lower_bound_value_4.0 = 0
  upper_bound_value_4.0 = 4294967295
  begin_iter_4 = fact1.stack_allocate Iter
  end_iter_4 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_4, begin_iter_4)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_4, end_iter_4)
  loop
  {
    condition_4 = fact1.iter_is_equal(begin_iter_4, end_iter_4)
    if (condition_4)
    {
      goto range_query.end_4
    }
    current_4 = fact1.iter_current(begin_iter_4)
    value_2 = fact2.stack_allocate Value
    value_2.0 = ((current_4.0 + 1) + (2 * current_4.0))
    fact2.insert(FN_ARG[0].2, value_2)
    fact1.iter_next(begin_iter_4)
  }
  range_query.end_4:
  lower_bound_value_5 = fact1.stack_allocate Value
  upper_bound_value_5 = fact1.stack_allocate Value
  lower_bound_value_5.0 = 0
  upper_bound_value_5.0 = 4294967295
  begin_iter_5 = fact1.stack_allocate Iter
  end_iter_5 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_5, begin_iter_5)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_5, end_iter_5)
  loop
  {
    condition_5 = fact1.iter_is_equal(begin_iter_5, end_iter_5)
    if (condition_5)
    {
      goto range_query.end_5
    }
    current_5 = fact1.iter_current(begin_iter_5)
    value_3 = fact2.stack_allocate Value
    value_3.0 = (current_5.0 + 3)
    fact2.insert(FN_ARG[0].2, value_3)
    fact1.iter_next(begin_iter_5)
  }
  range_query.end_5:
  lower_bound_value_6 = fact1.stack_allocate Value
  upper_bound_value_6 = fact1.stack_allocate Value
  lower_bound_value_6.0 = 0
  upper_bound_value_6.0 = 4294967295
  begin_iter_6 = fact1.stack_allocate Iter
  end_iter_6 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_6, begin_iter_6)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_6, end_iter_6)
  loop
  {
    condition_6 = fact1.iter_is_equal(begin_iter_6, end_iter_6)
    if (condition_6)
    {
      goto range_query.end_6
    }
    current_6 = fact1.iter_current(begin_iter_6)
    value_4 = fact2.stack_allocate Value
    value_4.0 = (current_6.0 + 3)
    fact2.insert(FN_ARG[0].2, value_4)
    fact1.iter_next(begin_iter_6)
  }
  range_query.end_6:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [1 x i32], i32 1
  %stack.ptr_1 = alloca [1 x i32], i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_4 = alloca [1 x i32], i32 1
  %stack.ptr_5 = alloca [1 x i32], i32 1
  %stack.ptr_6 = alloca [1 x i32], i32 1
  %stack.ptr_7 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_8 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_9 = alloca [1 x i32], i32 1
  %stack.ptr_10 = alloca [1 x i32], i32 1
  %stack.ptr_11 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_12 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_13 = alloca [1 x i32], i32 1
  %stack.ptr_14 = alloca [1 x i32], i32 1
  %stack.ptr_15 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_16 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_17 = alloca [1 x i32], i32 1
  %stack.ptr_18 = alloca [1 x i32], i32 1
  %stack.ptr_19 = alloca [1 x i32], i32 1
  %stack.ptr_20 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_21 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_22 = alloca [1 x i32], i32 1
  %stack.ptr_23 = alloca [1 x i32], i32 1
  %stack.ptr_24 = alloca [1 x i32], i32 1
  %stack.ptr_25 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_26 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_27 = alloca [1 x i32], i32 1
  %stack.ptr_28 = alloca [1 x i32], i32 1
  %stack.ptr_29 = alloca [1 x i32], i32 1
  %stack.ptr_30 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_31 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_32 = alloca [1 x i32], i32 1
  %0 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_0, i32 0, i32 0
  store i32 0, i32* %0
  %1 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_1, i32 0, i32 0
  store i32 4294967295, i32* %1
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %2, [1 x i32]* %stack.ptr_0, %btree_iterator_t_0* %stack.ptr_2)
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %3, [1 x i32]* %stack.ptr_1, %btree_iterator_t_0* %stack.ptr_3)
  br label %loop_0
loop_0:
  %4 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_2, %btree_iterator_t_0* %stack.ptr_3)
  br i1 %4, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %5 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_2)
  %6 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_4, i32 0, i32 0
  %7 = getelementptr [1 x i32], [1 x i32]* %5, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = sub i32 8, %8
  %10 = getelementptr [1 x i32], [1 x i32]* %5, i32 0, i32 0
  %11 = load i32, i32* %10
  %12 = udiv i32 %9, %11
  store i32 %12, i32* %6
  %13 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %14 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %13, [1 x i32]* %stack.ptr_4)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_2)
  br label %loop_0
range_query.end:
  %15 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_5, i32 0, i32 0
  store i32 0, i32* %15
  %16 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_6, i32 0, i32 0
  store i32 4294967295, i32* %16
  %17 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %17, [1 x i32]* %stack.ptr_5, %btree_iterator_t_0* %stack.ptr_7)
  %18 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %18, [1 x i32]* %stack.ptr_6, %btree_iterator_t_0* %stack.ptr_8)
  br label %loop_1
loop_1:
  %19 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_7, %btree_iterator_t_0* %stack.ptr_8)
  br i1 %19, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %20 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_7)
  %21 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_9, i32 0, i32 0
  %22 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %23 = load i32, i32* %22
  %24 = add i32 %23, 4
  store i32 %24, i32* %21
  %25 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_10, i32 0, i32 0
  %26 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %27 = load i32, i32* %26
  %28 = add i32 %27, 4
  store i32 %28, i32* %25
  %29 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %29, [1 x i32]* %stack.ptr_9, %btree_iterator_t_0* %stack.ptr_11)
  %30 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %30, [1 x i32]* %stack.ptr_10, %btree_iterator_t_0* %stack.ptr_12)
  br label %loop_2
loop_2:
  %31 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_11, %btree_iterator_t_0* %stack.ptr_12)
  br i1 %31, label %if_2, label %end_if_2
if_2:
  br label %range_query.end_2
end_if_2:
  %32 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_11)
  %33 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_13, i32 0, i32 0
  %34 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %35 = load i32, i32* %34
  %36 = add i32 %35, 4
  store i32 %36, i32* %33
  %37 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_14, i32 0, i32 0
  %38 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %39 = load i32, i32* %38
  %40 = add i32 %39, 4
  store i32 %40, i32* %37
  %41 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %41, [1 x i32]* %stack.ptr_13, %btree_iterator_t_0* %stack.ptr_15)
  %42 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %42, [1 x i32]* %stack.ptr_14, %btree_iterator_t_0* %stack.ptr_16)
  br label %loop_3
loop_3:
  %43 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_15, %btree_iterator_t_0* %stack.ptr_16)
  br i1 %43, label %if_3, label %end_if_3
if_3:
  br label %range_query.end_3
end_if_3:
  %44 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_15)
  %45 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_17, i32 0, i32 0
  %46 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %47 = load i32, i32* %46
  store i32 %47, i32* %45
  %48 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %49 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %48, [1 x i32]* %stack.ptr_17)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_15)
  br label %loop_3
range_query.end_3:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_11)
  br label %loop_2
range_query.end_2:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_7)
  br label %loop_1
range_query.end_1:
  %50 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_18, i32 0, i32 0
  store i32 0, i32* %50
  %51 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_19, i32 0, i32 0
  store i32 4294967295, i32* %51
  %52 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %52, [1 x i32]* %stack.ptr_18, %btree_iterator_t_0* %stack.ptr_20)
  %53 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %53, [1 x i32]* %stack.ptr_19, %btree_iterator_t_0* %stack.ptr_21)
  br label %loop_4
loop_4:
  %54 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_20, %btree_iterator_t_0* %stack.ptr_21)
  br i1 %54, label %if_4, label %end_if_4
if_4:
  br label %range_query.end_4
end_if_4:
  %55 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_20)
  %56 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_22, i32 0, i32 0
  %57 = getelementptr [1 x i32], [1 x i32]* %55, i32 0, i32 0
  %58 = load i32, i32* %57
  %59 = add i32 %58, 1
  %60 = getelementptr [1 x i32], [1 x i32]* %55, i32 0, i32 0
  %61 = load i32, i32* %60
  %62 = mul i32 2, %61
  %63 = add i32 %59, %62
  store i32 %63, i32* %56
  %64 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %65 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %64, [1 x i32]* %stack.ptr_22)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_20)
  br label %loop_4
range_query.end_4:
  %66 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_23, i32 0, i32 0
  store i32 0, i32* %66
  %67 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_24, i32 0, i32 0
  store i32 4294967295, i32* %67
  %68 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %68, [1 x i32]* %stack.ptr_23, %btree_iterator_t_0* %stack.ptr_25)
  %69 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %69, [1 x i32]* %stack.ptr_24, %btree_iterator_t_0* %stack.ptr_26)
  br label %loop_5
loop_5:
  %70 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_25, %btree_iterator_t_0* %stack.ptr_26)
  br i1 %70, label %if_5, label %end_if_5
if_5:
  br label %range_query.end_5
end_if_5:
  %71 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_25)
  %72 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_27, i32 0, i32 0
  %73 = getelementptr [1 x i32], [1 x i32]* %71, i32 0, i32 0
  %74 = load i32, i32* %73
  %75 = add i32 %74, 3
  store i32 %75, i32* %72
  %76 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %77 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %76, [1 x i32]* %stack.ptr_27)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_25)
  br label %loop_5
range_query.end_5:
  %78 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_28, i32 0, i32 0
  store i32 0, i32* %78
  %79 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_29, i32 0, i32 0
  store i32 4294967295, i32* %79
  %80 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %80, [1 x i32]* %stack.ptr_28, %btree_iterator_t_0* %stack.ptr_30)
  %81 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %81, [1 x i32]* %stack.ptr_29, %btree_iterator_t_0* %stack.ptr_31)
  br label %loop_6
loop_6:
  %82 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_30, %btree_iterator_t_0* %stack.ptr_31)
  br i1 %82, label %if_6, label %end_if_6
if_6:
  br label %range_query.end_6
end_if_6:
  %83 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_30)
  %84 = getelementptr [1 x i32], [1 x i32]* %stack.ptr_32, i32 0, i32 0
  %85 = getelementptr [1 x i32], [1 x i32]* %83, i32 0, i32 0
  %86 = load i32, i32* %85
  %87 = add i32 %86, 3
  store i32 %87, i32* %84
  %88 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %89 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %88, [1 x i32]* %stack.ptr_32)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_30)
  br label %loop_6
range_query.end_6:
  ret void
}
