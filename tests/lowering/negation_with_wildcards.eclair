// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn.*eclair_program_run" > %t/actual_eir_snippet.out
// RUN: diff %t/expected_eir.out %t/actual_eir_snippet.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def first(u32).
@def second(u32, u32).
@def third(u32, u32) output.

first(1).
second(2, 3).

third(x, x) :-
  first(x),
  !second(_, x).
//--- expected_ra.out
project (2, 3) into second
project (1) into first
search first as first0 do
  if (undefined, first0[0]) âˆ‰ second do
    project (first0[0], first0[0]) into third
//--- expected_eir.out
export fn eclair_program_run(*Program) -> Void
{
  value = second.stack_allocate Value
  value.0 = 2
  value.1 = 3
  second.insert(FN_ARG[0].2, value)
  value_1 = first.stack_allocate Value
  value_1.0 = 1
  first.insert(FN_ARG[0].1, value_1)
  lower_bound_value = first.stack_allocate Value
  upper_bound_value = first.stack_allocate Value
  lower_bound_value.0 = 0
  upper_bound_value.0 = 4294967295
  begin_iter = first.stack_allocate Iter
  end_iter = first.stack_allocate Iter
  first.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  first.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = first.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = first.iter_current(begin_iter)
    lower_bound_value_1 = second.stack_allocate Value
    lower_bound_value_1.0 = 0
    lower_bound_value_1.1 = current.0
    upper_bound_value_1 = second.stack_allocate Value
    upper_bound_value_1.0 = 4294967295
    upper_bound_value_1.1 = current.0
    begin_iter_1 = second.stack_allocate Iter
    end_iter_1 = second.stack_allocate Iter
    second.iter_lower_bound(FN_ARG[0].2, lower_bound_value_1, begin_iter_1)
    second.iter_upper_bound(FN_ARG[0].2, upper_bound_value_1, end_iter_1)
    is_empty = second.iter_is_equal(begin_iter_1, end_iter_1)
    condition_1 = not is_empty
    if (condition_1)
    {
      value_2 = third.stack_allocate Value
      value_2.0 = current.0
      value_2.1 = current.0
      third.insert(FN_ARG[0].3, value_2)
    }
    first.iter_next(begin_iter)
  }
  range_query.end:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %value_0 = alloca [2 x i32], i32 1
  %0 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 0
  store i32 2, i32* %0
  %1 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 1
  store i32 3, i32* %1
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %3 = call ccc i1 @btree_insert_value_1(%btree_t_1* %2, [2 x i32]* %value_0)
  %value_1_0 = alloca [1 x i32], i32 1
  %4 = getelementptr [1 x i32], [1 x i32]* %value_1_0, i32 0, i32 0
  store i32 1, i32* %4
  %5 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %6 = call ccc i1 @btree_insert_value_0(%btree_t_0* %5, [1 x i32]* %value_1_0)
  %lower_bound_value_0 = alloca [1 x i32], i32 1
  %upper_bound_value_0 = alloca [1 x i32], i32 1
  %7 = getelementptr [1 x i32], [1 x i32]* %lower_bound_value_0, i32 0, i32 0
  store i32 0, i32* %7
  %8 = getelementptr [1 x i32], [1 x i32]* %upper_bound_value_0, i32 0, i32 0
  store i32 4294967295, i32* %8
  %begin_iter_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_0 = alloca %btree_iterator_t_0, i32 1
  %9 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %9, [1 x i32]* %lower_bound_value_0, %btree_iterator_t_0* %begin_iter_0)
  %10 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %10, [1 x i32]* %upper_bound_value_0, %btree_iterator_t_0* %end_iter_0)
  br label %loop_0
loop_0:
  %condition_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_0, %btree_iterator_t_0* %end_iter_0)
  br i1 %condition_0, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %current_0 = call ccc [1 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_0)
  %lower_bound_value_1_0 = alloca [2 x i32], i32 1
  %11 = getelementptr [2 x i32], [2 x i32]* %lower_bound_value_1_0, i32 0, i32 0
  store i32 0, i32* %11
  %12 = getelementptr [2 x i32], [2 x i32]* %lower_bound_value_1_0, i32 0, i32 1
  %13 = getelementptr [1 x i32], [1 x i32]* %current_0, i32 0, i32 0
  %14 = load i32, i32* %13
  store i32 %14, i32* %12
  %upper_bound_value_1_0 = alloca [2 x i32], i32 1
  %15 = getelementptr [2 x i32], [2 x i32]* %upper_bound_value_1_0, i32 0, i32 0
  store i32 4294967295, i32* %15
  %16 = getelementptr [2 x i32], [2 x i32]* %upper_bound_value_1_0, i32 0, i32 1
  %17 = getelementptr [1 x i32], [1 x i32]* %current_0, i32 0, i32 0
  %18 = load i32, i32* %17
  store i32 %18, i32* %16
  %begin_iter_1_0 = alloca %btree_iterator_t_1, i32 1
  %end_iter_1_0 = alloca %btree_iterator_t_1, i32 1
  %19 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @btree_lower_bound_1(%btree_t_1* %19, [2 x i32]* %lower_bound_value_1_0, %btree_iterator_t_1* %begin_iter_1_0)
  %20 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @btree_upper_bound_1(%btree_t_1* %20, [2 x i32]* %upper_bound_value_1_0, %btree_iterator_t_1* %end_iter_1_0)
  %is_empty_0 = call ccc i1 @btree_iterator_is_equal_1(%btree_iterator_t_1* %begin_iter_1_0, %btree_iterator_t_1* %end_iter_1_0)
  %condition_1_0 = select i1 %is_empty_0, i1 0, i1 1
  br i1 %condition_1_0, label %if_1, label %end_if_1
if_1:
  %value_2_0 = alloca [2 x i32], i32 1
  %21 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 0
  %22 = getelementptr [1 x i32], [1 x i32]* %current_0, i32 0, i32 0
  %23 = load i32, i32* %22
  store i32 %23, i32* %21
  %24 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 1
  %25 = getelementptr [1 x i32], [1 x i32]* %current_0, i32 0, i32 0
  %26 = load i32, i32* %25
  store i32 %26, i32* %24
  %27 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %28 = call ccc i1 @btree_insert_value_2(%btree_t_2* %27, [2 x i32]* %value_2_0)
  br label %end_if_1
end_if_1:
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_0)
  br label %loop_0
range_query.end:
  ret void
}
