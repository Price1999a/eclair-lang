// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_add_facts" > %t/actual_eclair_add_facts_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_get_facts" > %t/actual_eclair_get_facts_llvm.out
// RUN: diff %t/expected_eclair_add_facts_llvm.out %t/actual_eclair_add_facts_llvm.out
// RUN: diff %t/expected_eclair_get_facts_llvm.out %t/actual_eclair_get_facts_llvm.out

//--- program.eclair
@def edge(u32, u32) input.
@def path(u32, u32) output.

path(x, y) :-
  edge(x, y).

path(x, z) :-
  edge(x, y),
  path(y, z).

//--- expected_ra.out
search edge as edge0 do
  project (edge0[0], edge0[1]) into path
merge path delta_path
loop do
  purge new_path
  search edge as edge0 do
    search delta_path as delta_path1 where (edge0[1] = delta_path1[0]) do
      if (edge0[0], delta_path1[1]) âˆ‰ path do
        project (edge0[0], delta_path1[1]) into new_path
  exit if counttuples(new_path) = 0
  merge new_path path
  swap new_path delta_path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  delta_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  new_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  delta_path.init_empty(program.1)
  edge.init_empty(program.2)
  new_path.init_empty(program.3)
  path.init_empty(program.4)
  symbol_table.insert(program.0, edge)
  symbol_table.insert(program.0, path)
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  delta_path.destroy(FN_ARG[0].1)
  edge.destroy(FN_ARG[0].2)
  new_path.destroy(FN_ARG[0].3)
  path.destroy(FN_ARG[0].4)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = edge.stack_allocate Value
  upper_bound_value = edge.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  begin_iter = edge.stack_allocate Iter
  end_iter = edge.stack_allocate Iter
  edge.iter_lower_bound(FN_ARG[0].2, lower_bound_value, begin_iter)
  edge.iter_upper_bound(FN_ARG[0].2, upper_bound_value, end_iter)
  loop
  {
    condition = edge.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = edge.iter_current(begin_iter)
    value = path.stack_allocate Value
    value.0 = current.0
    value.1 = current.1
    path.insert(FN_ARG[0].4, value)
    edge.iter_next(begin_iter)
  }
  range_query.end:
  begin_iter_1 = path.stack_allocate Iter
  end_iter_1 = path.stack_allocate Iter
  path.iter_begin(FN_ARG[0].4, begin_iter_1)
  path.iter_end(FN_ARG[0].4, end_iter_1)
  delta_path.insert_range<path[0, 1]>(FN_ARG[0].1, begin_iter_1, end_iter_1)
  loop
  {
    new_path.purge(FN_ARG[0].3)
    lower_bound_value_1 = edge.stack_allocate Value
    upper_bound_value_1 = edge.stack_allocate Value
    lower_bound_value_1.0 = 0
    lower_bound_value_1.1 = 0
    upper_bound_value_1.0 = 4294967295
    upper_bound_value_1.1 = 4294967295
    begin_iter_2 = edge.stack_allocate Iter
    end_iter_2 = edge.stack_allocate Iter
    edge.iter_lower_bound(FN_ARG[0].2, lower_bound_value_1, begin_iter_2)
    edge.iter_upper_bound(FN_ARG[0].2, upper_bound_value_1, end_iter_2)
    loop
    {
      condition_1 = edge.iter_is_equal(begin_iter_2, end_iter_2)
      if (condition_1)
      {
        goto range_query.end_1
      }
      current_1 = edge.iter_current(begin_iter_2)
      lower_bound_value_2 = path.stack_allocate Value
      upper_bound_value_2 = path.stack_allocate Value
      lower_bound_value_2.0 = current_1.1
      lower_bound_value_2.1 = 0
      upper_bound_value_2.0 = current_1.1
      upper_bound_value_2.1 = 4294967295
      begin_iter_3 = path.stack_allocate Iter
      end_iter_3 = path.stack_allocate Iter
      delta_path.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_3)
      delta_path.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_3)
      loop
      {
        condition_2 = delta_path.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_2)
        {
          goto range_query.end_2
        }
        current_2 = delta_path.iter_current(begin_iter_3)
        value_1 = path.stack_allocate Value
        value_1.0 = current_1.0
        value_1.1 = current_2.1
        contains_result = path.contains(FN_ARG[0].4, value_1)
        condition_3 = not contains_result
        if (condition_3)
        {
          value_2 = path.stack_allocate Value
          value_2.0 = current_1.0
          value_2.1 = current_2.1
          new_path.insert(FN_ARG[0].3, value_2)
        }
        delta_path.iter_next(begin_iter_3)
      }
      range_query.end_2:
      edge.iter_next(begin_iter_2)
    }
    range_query.end_1:
    condition_4 = new_path.is_empty(FN_ARG[0].3)
    if (condition_4)
    {
      goto loop.end
    }
    begin_iter_4 = path.stack_allocate Iter
    end_iter_4 = path.stack_allocate Iter
    new_path.iter_begin(FN_ARG[0].3, begin_iter_4)
    new_path.iter_end(FN_ARG[0].3, end_iter_4)
    path.insert_range<new_path[0, 1]>(FN_ARG[0].4, begin_iter_4, end_iter_4)
    new_path.swap(FN_ARG[0].3, FN_ARG[0].1)
  }
  loop.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc %program* @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %0 = call ccc i8* @malloc(i32 1624)
  %1 = bitcast i8* %0 to %program*
  %2 = getelementptr %program, %program* %1, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(%symbol_table* %2)
  %3 = getelementptr %program, %program* %1, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %1, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %4)
  %5 = getelementptr %program, %program* %1, i32 0, i32 3
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %5)
  %6 = getelementptr %program, %program* %1, i32 0, i32 4
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %6)
  %7 = getelementptr %program, %program* %1, i32 0, i32 0
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* @string_literal_0, i32 0, i32 0
  %9 = zext i32 4 to i64
  %10 = call ccc i8* @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %8, i64 %9, i1 0)
  %11 = alloca %symbol_t, i32 1
  call ccc void @eclair_symbol_init(%symbol_t* %11, i32 4, i8* %10)
  %12 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %7, %symbol_t* %11)
  %13 = getelementptr %program, %program* %1, i32 0, i32 0
  %14 = getelementptr inbounds [5 x i8], [5 x i8]* @string_literal_1, i32 0, i32 0
  %15 = zext i32 4 to i64
  %16 = call ccc i8* @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %14, i64 %15, i1 0)
  %17 = alloca %symbol_t, i32 1
  call ccc void @eclair_symbol_init(%symbol_t* %17, i32 4, i8* %16)
  %18 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %13, %symbol_t* %17)
  ret %program* %1
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(%program* %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, %program* %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(%symbol_table* %0)
  %1 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %2)
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %4)
  %5 = bitcast %program* %arg_0 to i8*
  call ccc void @free(i8* %5)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %0 = alloca [2 x i32], i32 1
  %1 = alloca [2 x i32], i32 1
  %2 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 0
  store i32 0, i32* %2
  %3 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 1
  store i32 0, i32* %3
  %4 = getelementptr [2 x i32], [2 x i32]* %1, i32 0, i32 0
  store i32 4294967295, i32* %4
  %5 = getelementptr [2 x i32], [2 x i32]* %1, i32 0, i32 1
  store i32 4294967295, i32* %5
  %6 = alloca %btree_iterator_t_0, i32 1
  %7 = alloca %btree_iterator_t_0, i32 1
  %8 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %8, [2 x i32]* %0, %btree_iterator_t_0* %6)
  %9 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %9, [2 x i32]* %1, %btree_iterator_t_0* %7)
  br label %loop_0
loop_0:
  %10 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %6, %btree_iterator_t_0* %7)
  br i1 %10, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %11 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %6)
  %12 = alloca [2 x i32], i32 1
  %13 = getelementptr [2 x i32], [2 x i32]* %12, i32 0, i32 0
  %14 = getelementptr [2 x i32], [2 x i32]* %11, i32 0, i32 0
  %15 = load i32, i32* %14
  store i32 %15, i32* %13
  %16 = getelementptr [2 x i32], [2 x i32]* %12, i32 0, i32 1
  %17 = getelementptr [2 x i32], [2 x i32]* %11, i32 0, i32 1
  %18 = load i32, i32* %17
  store i32 %18, i32* %16
  %19 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  %20 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %19, [2 x i32]* %12)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %6)
  br label %loop_0
range_query.end:
  %21 = alloca %btree_iterator_t_0, i32 1
  %22 = alloca %btree_iterator_t_0, i32 1
  %23 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_begin_0(%btree_t_0* %23, %btree_iterator_t_0* %21)
  %24 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_end_0(%btree_t_0* %24, %btree_iterator_t_0* %22)
  %25 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_insert_range_delta_path_path(%btree_t_0* %25, %btree_iterator_t_0* %21, %btree_iterator_t_0* %22)
  br label %loop_1
loop_1:
  %26 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_clear_0(%btree_t_0* %26)
  %27 = alloca [2 x i32], i32 1
  %28 = alloca [2 x i32], i32 1
  %29 = getelementptr [2 x i32], [2 x i32]* %27, i32 0, i32 0
  store i32 0, i32* %29
  %30 = getelementptr [2 x i32], [2 x i32]* %27, i32 0, i32 1
  store i32 0, i32* %30
  %31 = getelementptr [2 x i32], [2 x i32]* %28, i32 0, i32 0
  store i32 4294967295, i32* %31
  %32 = getelementptr [2 x i32], [2 x i32]* %28, i32 0, i32 1
  store i32 4294967295, i32* %32
  %33 = alloca %btree_iterator_t_0, i32 1
  %34 = alloca %btree_iterator_t_0, i32 1
  %35 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %35, [2 x i32]* %27, %btree_iterator_t_0* %33)
  %36 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %36, [2 x i32]* %28, %btree_iterator_t_0* %34)
  br label %loop_2
loop_2:
  %37 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %33, %btree_iterator_t_0* %34)
  br i1 %37, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %38 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %33)
  %39 = alloca [2 x i32], i32 1
  %40 = alloca [2 x i32], i32 1
  %41 = getelementptr [2 x i32], [2 x i32]* %39, i32 0, i32 0
  %42 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 1
  %43 = load i32, i32* %42
  store i32 %43, i32* %41
  %44 = getelementptr [2 x i32], [2 x i32]* %39, i32 0, i32 1
  store i32 0, i32* %44
  %45 = getelementptr [2 x i32], [2 x i32]* %40, i32 0, i32 0
  %46 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 1
  %47 = load i32, i32* %46
  store i32 %47, i32* %45
  %48 = getelementptr [2 x i32], [2 x i32]* %40, i32 0, i32 1
  store i32 4294967295, i32* %48
  %49 = alloca %btree_iterator_t_0, i32 1
  %50 = alloca %btree_iterator_t_0, i32 1
  %51 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %51, [2 x i32]* %39, %btree_iterator_t_0* %49)
  %52 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %52, [2 x i32]* %40, %btree_iterator_t_0* %50)
  br label %loop_3
loop_3:
  %53 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %49, %btree_iterator_t_0* %50)
  br i1 %53, label %if_2, label %end_if_2
if_2:
  br label %range_query.end_2
end_if_2:
  %54 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %49)
  %55 = alloca [2 x i32], i32 1
  %56 = getelementptr [2 x i32], [2 x i32]* %55, i32 0, i32 0
  %57 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 0
  %58 = load i32, i32* %57
  store i32 %58, i32* %56
  %59 = getelementptr [2 x i32], [2 x i32]* %55, i32 0, i32 1
  %60 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 1
  %61 = load i32, i32* %60
  store i32 %61, i32* %59
  %62 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  %63 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %62, [2 x i32]* %55)
  %64 = select i1 %63, i1 0, i1 1
  br i1 %64, label %if_3, label %end_if_3
if_3:
  %65 = alloca [2 x i32], i32 1
  %66 = getelementptr [2 x i32], [2 x i32]* %65, i32 0, i32 0
  %67 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 0
  %68 = load i32, i32* %67
  store i32 %68, i32* %66
  %69 = getelementptr [2 x i32], [2 x i32]* %65, i32 0, i32 1
  %70 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 1
  %71 = load i32, i32* %70
  store i32 %71, i32* %69
  %72 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %73 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %72, [2 x i32]* %65)
  br label %end_if_3
end_if_3:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %49)
  br label %loop_3
range_query.end_2:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %33)
  br label %loop_2
range_query.end_1:
  %74 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %75 = call ccc i1 @eclair_btree_is_empty_0(%btree_t_0* %74)
  br i1 %75, label %if_4, label %end_if_4
if_4:
  br label %loop.end
end_if_4:
  %76 = alloca %btree_iterator_t_0, i32 1
  %77 = alloca %btree_iterator_t_0, i32 1
  %78 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_begin_0(%btree_t_0* %78, %btree_iterator_t_0* %76)
  %79 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_end_0(%btree_t_0* %79, %btree_iterator_t_0* %77)
  %80 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_insert_range_path_new_path(%btree_t_0* %80, %btree_iterator_t_0* %76, %btree_iterator_t_0* %77)
  %81 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %82 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_swap_0(%btree_t_0* %81, %btree_t_0* %82)
  br label %loop_1
loop.end:
  ret void
}
//--- expected_eclair_add_facts_llvm.out
define external ccc void @eclair_add_facts(%program* %eclair_program_0, i32 %fact_type_0, i32* %memory_0, i32 %fact_count_0) "wasm-export-name"="eclair_add_facts" {
start:
  switch i32 %fact_type_0, label %switch.default_0 [i32 0, label %edge_0]
edge_0:
  %0 = getelementptr %program, %program* %eclair_program_0, i32 0, i32 2
  %1 = bitcast i32* %memory_0 to [2 x i32]*
  br label %for_begin_0
for_begin_0:
  %2 = phi i32 [0, %edge_0], [%6, %for_body_0]
  %3 = icmp ult i32 %2, %fact_count_0
  br i1 %3, label %for_body_0, label %for_end_0
for_body_0:
  %4 = getelementptr [2 x i32], [2 x i32]* %1, i32 %2
  %5 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %0, [2 x i32]* %4)
  %6 = add i32 1, %2
  br label %for_begin_0
for_end_0:
  ret void
switch.default_0:
  ret void
}
//--- expected_eclair_get_facts_llvm.out
define external ccc i32* @eclair_get_facts(%program* %eclair_program_0, i32 %fact_type_0) "wasm-export-name"="eclair_get_facts" {
start:
  switch i32 %fact_type_0, label %switch.default_0 [i32 1, label %path_0]
path_0:
  %0 = getelementptr %program, %program* %eclair_program_0, i32 0, i32 4
  %1 = call ccc i64 @eclair_btree_size_0(%btree_t_0* %0)
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 8
  %4 = call ccc i8* @malloc(i32 %3)
  %5 = bitcast i8* %4 to [2 x i32]*
  %6 = alloca i32, i32 1
  store i32 0, i32* %6
  %7 = alloca %btree_iterator_t_0, i32 1
  %8 = alloca %btree_iterator_t_0, i32 1
  call ccc void @eclair_btree_begin_0(%btree_t_0* %0, %btree_iterator_t_0* %7)
  call ccc void @eclair_btree_end_0(%btree_t_0* %0, %btree_iterator_t_0* %8)
  br label %while_begin_0
while_begin_0:
  %9 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %7, %btree_iterator_t_0* %8)
  %10 = select i1 %9, i1 0, i1 1
  br i1 %10, label %while_body_0, label %while_end_0
while_body_0:
  %11 = load i32, i32* %6
  %12 = getelementptr [2 x i32], [2 x i32]* %5, i32 %11
  %13 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %7)
  %14 = getelementptr [2 x i32], [2 x i32]* %13, i32 0
  %15 = load [2 x i32], [2 x i32]* %14
  %16 = getelementptr [2 x i32], [2 x i32]* %12, i32 0
  store [2 x i32] %15, [2 x i32]* %16
  %17 = add i32 %11, 1
  store i32 %17, i32* %6
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %7)
  br label %while_begin_0
while_end_0:
  %18 = bitcast i8* %4 to i32*
  ret i32* %18
switch.default_0:
  ret i32* zeroinitializer
}
