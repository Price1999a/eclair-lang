// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def first(u32).
@def second(u32, u32).
@def third(u32, u32) output.

first(1).
second(2, 3).

third(x, y) :-
  first(y),
  second(x, y).

//--- expected_ra.out
project (2, 3) into second
project (1) into first
search first as first0 do
  search second as second1 where (first0[0] = second1[1]) do
    project (second1[0], first0[0]) into third
//--- expected_eir.out
declare_type Program
{
  symbol_table
  first btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  second btree(num_columns=2, index=[1,0], block_size=256, search_type=linear)
  third btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  first.init_empty(program.1)
  second.init_empty(program.2)
  third.init_empty(program.3)
  symbol_table.insert(program.0, first)
  symbol_table.insert(program.0, second)
  symbol_table.insert(program.0, third)
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  first.destroy(FN_ARG[0].1)
  second.destroy(FN_ARG[0].2)
  third.destroy(FN_ARG[0].3)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = second.stack_allocate Value
  value.0 = 2
  value.1 = 3
  second.insert(FN_ARG[0].2, value)
  value_1 = first.stack_allocate Value
  value_1.0 = 1
  first.insert(FN_ARG[0].1, value_1)
  lower_bound_value = first.stack_allocate Value
  upper_bound_value = first.stack_allocate Value
  lower_bound_value.0 = 0
  upper_bound_value.0 = 4294967295
  begin_iter = first.stack_allocate Iter
  end_iter = first.stack_allocate Iter
  first.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  first.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = first.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = first.iter_current(begin_iter)
    lower_bound_value_1 = second.stack_allocate Value
    upper_bound_value_1 = second.stack_allocate Value
    lower_bound_value_1.0 = 0
    lower_bound_value_1.1 = current.0
    upper_bound_value_1.0 = 4294967295
    upper_bound_value_1.1 = current.0
    begin_iter_1 = second.stack_allocate Iter
    end_iter_1 = second.stack_allocate Iter
    second.iter_lower_bound(FN_ARG[0].2, lower_bound_value_1, begin_iter_1)
    second.iter_upper_bound(FN_ARG[0].2, upper_bound_value_1, end_iter_1)
    loop
    {
      condition_1 = second.iter_is_equal(begin_iter_1, end_iter_1)
      if (condition_1)
      {
        goto range_query.end_1
      }
      current_1 = second.iter_current(begin_iter_1)
      value_2 = third.stack_allocate Value
      value_2.0 = current_1.0
      value_2.1 = current.0
      third.insert(FN_ARG[0].3, value_2)
      second.iter_next(begin_iter_1)
    }
    range_query.end_1:
    first.iter_next(begin_iter)
  }
  range_query.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_1, %btree_t_2}
//--- expected_eclair_program_init_llvm.out
define external ccc %program* @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %0 = call ccc i8* @malloc(i32 1608)
  %1 = bitcast i8* %0 to %program*
  %2 = getelementptr %program, %program* %1, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(%symbol_table* %2)
  %3 = getelementptr %program, %program* %1, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %1, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_1(%btree_t_1* %4)
  %5 = getelementptr %program, %program* %1, i32 0, i32 3
  call ccc void @eclair_btree_init_empty_2(%btree_t_2* %5)
  %6 = getelementptr %program, %program* %1, i32 0, i32 0
  %7 = getelementptr inbounds [6 x i8], [6 x i8]* @string_literal_0, i32 0, i32 0
  %8 = zext i32 5 to i64
  %9 = call ccc i8* @malloc(i32 5)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %7, i64 %8, i1 0)
  %10 = alloca %symbol_t, i32 1
  call ccc void @eclair_symbol_init(%symbol_t* %10, i32 5, i8* %9)
  %11 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %6, %symbol_t* %10)
  %12 = getelementptr %program, %program* %1, i32 0, i32 0
  %13 = getelementptr inbounds [7 x i8], [7 x i8]* @string_literal_1, i32 0, i32 0
  %14 = zext i32 6 to i64
  %15 = call ccc i8* @malloc(i32 6)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %13, i64 %14, i1 0)
  %16 = alloca %symbol_t, i32 1
  call ccc void @eclair_symbol_init(%symbol_t* %16, i32 6, i8* %15)
  %17 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %12, %symbol_t* %16)
  %18 = getelementptr %program, %program* %1, i32 0, i32 0
  %19 = getelementptr inbounds [6 x i8], [6 x i8]* @string_literal_2, i32 0, i32 0
  %20 = zext i32 5 to i64
  %21 = call ccc i8* @malloc(i32 5)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %19, i64 %20, i1 0)
  %22 = alloca %symbol_t, i32 1
  call ccc void @eclair_symbol_init(%symbol_t* %22, i32 5, i8* %21)
  %23 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %18, %symbol_t* %22)
  ret %program* %1
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(%program* %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, %program* %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(%symbol_table* %0)
  %1 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_1(%btree_t_1* %2)
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_destroy_2(%btree_t_2* %3)
  %4 = bitcast %program* %arg_0 to i8*
  call ccc void @free(i8* %4)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %0 = alloca [2 x i32], i32 1
  %1 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 0
  store i32 2, i32* %1
  %2 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 1
  store i32 3, i32* %2
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %4 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %3, [2 x i32]* %0)
  %5 = alloca [1 x i32], i32 1
  %6 = getelementptr [1 x i32], [1 x i32]* %5, i32 0, i32 0
  store i32 1, i32* %6
  %7 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %8 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %7, [1 x i32]* %5)
  %9 = alloca [1 x i32], i32 1
  %10 = alloca [1 x i32], i32 1
  %11 = getelementptr [1 x i32], [1 x i32]* %9, i32 0, i32 0
  store i32 0, i32* %11
  %12 = getelementptr [1 x i32], [1 x i32]* %10, i32 0, i32 0
  store i32 4294967295, i32* %12
  %13 = alloca %btree_iterator_t_0, i32 1
  %14 = alloca %btree_iterator_t_0, i32 1
  %15 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %15, [1 x i32]* %9, %btree_iterator_t_0* %13)
  %16 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %16, [1 x i32]* %10, %btree_iterator_t_0* %14)
  br label %loop_0
loop_0:
  %17 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %13, %btree_iterator_t_0* %14)
  br i1 %17, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %18 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %13)
  %19 = alloca [2 x i32], i32 1
  %20 = alloca [2 x i32], i32 1
  %21 = getelementptr [2 x i32], [2 x i32]* %19, i32 0, i32 0
  store i32 0, i32* %21
  %22 = getelementptr [2 x i32], [2 x i32]* %19, i32 0, i32 1
  %23 = getelementptr [1 x i32], [1 x i32]* %18, i32 0, i32 0
  %24 = load i32, i32* %23
  store i32 %24, i32* %22
  %25 = getelementptr [2 x i32], [2 x i32]* %20, i32 0, i32 0
  store i32 4294967295, i32* %25
  %26 = getelementptr [2 x i32], [2 x i32]* %20, i32 0, i32 1
  %27 = getelementptr [1 x i32], [1 x i32]* %18, i32 0, i32 0
  %28 = load i32, i32* %27
  store i32 %28, i32* %26
  %29 = alloca %btree_iterator_t_1, i32 1
  %30 = alloca %btree_iterator_t_1, i32 1
  %31 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_1(%btree_t_1* %31, [2 x i32]* %19, %btree_iterator_t_1* %29)
  %32 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_1(%btree_t_1* %32, [2 x i32]* %20, %btree_iterator_t_1* %30)
  br label %loop_1
loop_1:
  %33 = call ccc i1 @eclair_btree_iterator_is_equal_1(%btree_iterator_t_1* %29, %btree_iterator_t_1* %30)
  br i1 %33, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %34 = call ccc [2 x i32]* @eclair_btree_iterator_current_1(%btree_iterator_t_1* %29)
  %35 = alloca [2 x i32], i32 1
  %36 = getelementptr [2 x i32], [2 x i32]* %35, i32 0, i32 0
  %37 = getelementptr [2 x i32], [2 x i32]* %34, i32 0, i32 0
  %38 = load i32, i32* %37
  store i32 %38, i32* %36
  %39 = getelementptr [2 x i32], [2 x i32]* %35, i32 0, i32 1
  %40 = getelementptr [1 x i32], [1 x i32]* %18, i32 0, i32 0
  %41 = load i32, i32* %40
  store i32 %41, i32* %39
  %42 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %43 = call ccc i1 @eclair_btree_insert_value_2(%btree_t_2* %42, [2 x i32]* %35)
  call ccc void @eclair_btree_iterator_next_1(%btree_iterator_t_1* %29)
  br label %loop_1
range_query.end_1:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %13)
  br label %loop_0
range_query.end:
  ret void
}
