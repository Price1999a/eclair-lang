// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: %extract_snippet %t/actual_eir.out "fn.*eclair_program_run" > %t/actual_eir_snippet.out
// RUN: diff %t/expected_eir.out %t/actual_eir_snippet.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def fact1(u32) input.
@def fact2(u32) input.
@def fact3(u32) output.

fact3(x) :-
  fact1(x),
  !fact1(x),
  !fact2(x),
  !fact2(y),
  y = x + 1.

fact3(x) :-
  fact1(x),
  fact2(y),
  !fact1(y).

//--- expected_ra.out
search fact1 as fact10 do
  search fact2 as fact21 do
    if (fact21[0]) ∉ fact1 do
      project (fact10[0]) into fact3
search fact1 as fact10 do
  if (fact10[0]) ∉ fact1 do
    if (fact10[0]) ∉ fact2 do
      if ((fact10[0] + 1)) ∉ fact2 do
        project (fact10[0]) into fact3
//--- expected_eir.out
export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = fact1.stack_allocate Value
  upper_bound_value = fact1.stack_allocate Value
  lower_bound_value.0 = 0
  upper_bound_value.0 = 4294967295
  begin_iter = fact1.stack_allocate Iter
  end_iter = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = fact1.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = fact1.iter_current(begin_iter)
    lower_bound_value_1 = fact2.stack_allocate Value
    upper_bound_value_1 = fact2.stack_allocate Value
    lower_bound_value_1.0 = 0
    upper_bound_value_1.0 = 4294967295
    begin_iter_1 = fact2.stack_allocate Iter
    end_iter_1 = fact2.stack_allocate Iter
    fact2.iter_lower_bound(FN_ARG[0].2, lower_bound_value_1, begin_iter_1)
    fact2.iter_upper_bound(FN_ARG[0].2, upper_bound_value_1, end_iter_1)
    loop
    {
      condition_1 = fact2.iter_is_equal(begin_iter_1, end_iter_1)
      if (condition_1)
      {
        goto range_query.end_1
      }
      current_1 = fact2.iter_current(begin_iter_1)
      value = fact1.stack_allocate Value
      value.0 = current_1.0
      contains_result = fact1.contains(FN_ARG[0].1, value)
      condition_2 = not contains_result
      if (condition_2)
      {
        value_1 = fact3.stack_allocate Value
        value_1.0 = current.0
        fact3.insert(FN_ARG[0].3, value_1)
      }
      fact2.iter_next(begin_iter_1)
    }
    range_query.end_1:
    fact1.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_2 = fact1.stack_allocate Value
  upper_bound_value_2 = fact1.stack_allocate Value
  lower_bound_value_2.0 = 0
  upper_bound_value_2.0 = 4294967295
  begin_iter_2 = fact1.stack_allocate Iter
  end_iter_2 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_2)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_2)
  loop
  {
    condition_3 = fact1.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_3)
    {
      goto range_query.end_2
    }
    current_2 = fact1.iter_current(begin_iter_2)
    value_2 = fact1.stack_allocate Value
    value_2.0 = current_2.0
    contains_result_1 = fact1.contains(FN_ARG[0].1, value_2)
    condition_4 = not contains_result_1
    if (condition_4)
    {
      value_3 = fact2.stack_allocate Value
      value_3.0 = current_2.0
      contains_result_2 = fact2.contains(FN_ARG[0].2, value_3)
      condition_5 = not contains_result_2
      if (condition_5)
      {
        value_4 = fact2.stack_allocate Value
        value_4.0 = (current_2.0 + 1)
        contains_result_3 = fact2.contains(FN_ARG[0].2, value_4)
        condition_6 = not contains_result_3
        if (condition_6)
        {
          value_5 = fact3.stack_allocate Value
          value_5.0 = current_2.0
          fact3.insert(FN_ARG[0].3, value_5)
        }
      }
    }
    fact1.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %0 = alloca [1 x i32], i32 1
  %1 = alloca [1 x i32], i32 1
  %2 = getelementptr [1 x i32], [1 x i32]* %0, i32 0, i32 0
  store i32 0, i32* %2
  %3 = getelementptr [1 x i32], [1 x i32]* %1, i32 0, i32 0
  store i32 4294967295, i32* %3
  %4 = alloca %btree_iterator_t_0, i32 1
  %5 = alloca %btree_iterator_t_0, i32 1
  %6 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %6, [1 x i32]* %0, %btree_iterator_t_0* %4)
  %7 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %7, [1 x i32]* %1, %btree_iterator_t_0* %5)
  br label %loop_0
loop_0:
  %8 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %4, %btree_iterator_t_0* %5)
  br i1 %8, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %9 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %4)
  %10 = alloca [1 x i32], i32 1
  %11 = alloca [1 x i32], i32 1
  %12 = getelementptr [1 x i32], [1 x i32]* %10, i32 0, i32 0
  store i32 0, i32* %12
  %13 = getelementptr [1 x i32], [1 x i32]* %11, i32 0, i32 0
  store i32 4294967295, i32* %13
  %14 = alloca %btree_iterator_t_0, i32 1
  %15 = alloca %btree_iterator_t_0, i32 1
  %16 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %16, [1 x i32]* %10, %btree_iterator_t_0* %14)
  %17 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %17, [1 x i32]* %11, %btree_iterator_t_0* %15)
  br label %loop_1
loop_1:
  %18 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %14, %btree_iterator_t_0* %15)
  br i1 %18, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %19 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %14)
  %20 = alloca [1 x i32], i32 1
  %21 = getelementptr [1 x i32], [1 x i32]* %20, i32 0, i32 0
  %22 = getelementptr [1 x i32], [1 x i32]* %19, i32 0, i32 0
  %23 = load i32, i32* %22
  store i32 %23, i32* %21
  %24 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %25 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %24, [1 x i32]* %20)
  %26 = select i1 %25, i1 0, i1 1
  br i1 %26, label %if_2, label %end_if_2
if_2:
  %27 = alloca [1 x i32], i32 1
  %28 = getelementptr [1 x i32], [1 x i32]* %27, i32 0, i32 0
  %29 = getelementptr [1 x i32], [1 x i32]* %9, i32 0, i32 0
  %30 = load i32, i32* %29
  store i32 %30, i32* %28
  %31 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %32 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %31, [1 x i32]* %27)
  br label %end_if_2
end_if_2:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %14)
  br label %loop_1
range_query.end_1:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %4)
  br label %loop_0
range_query.end:
  %33 = alloca [1 x i32], i32 1
  %34 = alloca [1 x i32], i32 1
  %35 = getelementptr [1 x i32], [1 x i32]* %33, i32 0, i32 0
  store i32 0, i32* %35
  %36 = getelementptr [1 x i32], [1 x i32]* %34, i32 0, i32 0
  store i32 4294967295, i32* %36
  %37 = alloca %btree_iterator_t_0, i32 1
  %38 = alloca %btree_iterator_t_0, i32 1
  %39 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %39, [1 x i32]* %33, %btree_iterator_t_0* %37)
  %40 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %40, [1 x i32]* %34, %btree_iterator_t_0* %38)
  br label %loop_2
loop_2:
  %41 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %37, %btree_iterator_t_0* %38)
  br i1 %41, label %if_3, label %end_if_3
if_3:
  br label %range_query.end_2
end_if_3:
  %42 = call ccc [1 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %37)
  %43 = alloca [1 x i32], i32 1
  %44 = getelementptr [1 x i32], [1 x i32]* %43, i32 0, i32 0
  %45 = getelementptr [1 x i32], [1 x i32]* %42, i32 0, i32 0
  %46 = load i32, i32* %45
  store i32 %46, i32* %44
  %47 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %48 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %47, [1 x i32]* %43)
  %49 = select i1 %48, i1 0, i1 1
  br i1 %49, label %if_4, label %end_if_6
if_4:
  %50 = alloca [1 x i32], i32 1
  %51 = getelementptr [1 x i32], [1 x i32]* %50, i32 0, i32 0
  %52 = getelementptr [1 x i32], [1 x i32]* %42, i32 0, i32 0
  %53 = load i32, i32* %52
  store i32 %53, i32* %51
  %54 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %55 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %54, [1 x i32]* %50)
  %56 = select i1 %55, i1 0, i1 1
  br i1 %56, label %if_5, label %end_if_5
if_5:
  %57 = alloca [1 x i32], i32 1
  %58 = getelementptr [1 x i32], [1 x i32]* %57, i32 0, i32 0
  %59 = getelementptr [1 x i32], [1 x i32]* %42, i32 0, i32 0
  %60 = load i32, i32* %59
  %61 = add i32 %60, 1
  store i32 %61, i32* %58
  %62 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %63 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %62, [1 x i32]* %57)
  %64 = select i1 %63, i1 0, i1 1
  br i1 %64, label %if_6, label %end_if_4
if_6:
  %65 = alloca [1 x i32], i32 1
  %66 = getelementptr [1 x i32], [1 x i32]* %65, i32 0, i32 0
  %67 = getelementptr [1 x i32], [1 x i32]* %42, i32 0, i32 0
  %68 = load i32, i32* %67
  store i32 %68, i32* %66
  %69 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %70 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %69, [1 x i32]* %65)
  br label %end_if_4
end_if_4:
  br label %end_if_5
end_if_5:
  br label %end_if_6
end_if_6:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %37)
  br label %loop_2
range_query.end_2:
  ret void
}
