// RUN: split-file %s %t

// RUN: %eclair compile --emit ast-simplified %t/program1.eclair > %t/actual1.out
// RUN: diff %t/expected1.out %t/actual1.out

// RUN: %eclair compile --emit ast-simplified %t/program2.eclair > %t/actual2.out
// RUN: diff -w %t/expected2.out %t/actual2.out

//--- program1.eclair
@def a(u32) output.
@def b(u32, u32) input.
@def c(u32, u32, u32, u32, u32) input.
@def other(u32) input.


a(x) :-
  b(x, x),
  other(x).

a(y) :-
  c(y, y, 42, x, y),
  other(y).

//--- expected1.out
@def a(u32) output.

@def b(u32, u32) input.

@def c(u32, u32, u32, u32, u32) input.

@def other(u32) input.

a(x) :-
  b(x, @x_0),
  other(x),
  x = @x_0.

a(y) :-
  c(y, @y_0, 42, x, @y_1),
  other(y),
  y = @y_1,
  y = @y_0.
//--- program2.eclair
@def edge(u32, u32) input.
@def path(u32, u32) output.

edge(1,2).

path(x, y) :-
  edge(x, z),
  path(z, y).

//--- expected2.out
@def edge(u32, u32) input.

@def path(u32, u32) output.

edge(1, 2).

path(x, y) :-
  edge(x, z),
  path(z, y).
