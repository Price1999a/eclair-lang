// NOTE: happy path is not tested, this is tested implicitly by running
// the compiler end-to-end in most other tests

// RUN: mkdir -p %t && sed s@TEST_DIR@%t@g %s > %t/input.test
// RUN: split-file %t/input.test %t

// RUN: %eclair compile %t/program.eclair 2> %t/top_level_facts_actual.out
// RUN: diff -w %t/top_level_facts_expected.out %t/top_level_facts_actual.out

//--- program.eclair
@def edge(u32, u32) output.

edge(a, 1).
edge(2, b).
edge(c, d).

//--- top_level_facts_expected.out
[error]: Variable in top level fact
     ╭──▶ TEST_DIR/program.eclair@3:6-3:7
     │
   3 │ edge(a, 1).
     •      ┬
     •      ╰╸ Only constants are allowed in facts.
     •
     │ Note: You can solve this by replacing the variable with a constant.
─────╯

[error]: Variable in top level fact
     ╭──▶ TEST_DIR/program.eclair@4:9-4:10
     │
   4 │ edge(2, b).
     •         ┬
     •         ╰╸ Only constants are allowed in facts.
     •
     │ Note: You can solve this by replacing the variable with a constant.
─────╯

[error]: Variable in top level fact
     ╭──▶ TEST_DIR/program.eclair@5:6-5:7
     │
   5 │ edge(c, d).
     •      ┬
     •      ╰╸ Only constants are allowed in facts.
     •
     │ Note: You can solve this by replacing the variable with a constant.
─────╯

[error]: Variable in top level fact
     ╭──▶ TEST_DIR/program.eclair@5:9-5:10
     │
   5 │ edge(c, d).
     •         ┬
     •         ╰╸ Only constants are allowed in facts.
     •
     │ Note: You can solve this by replacing the variable with a constant.
─────╯
//--- program2.eclair

// RUN: %eclair compile %t/program2.eclair 2> %t/ungrounded_var_in_rule_actual.out
// RUN: diff -w %t/ungrounded_var_in_rule_expected.out %t/ungrounded_var_in_rule_actual.out

@def edge(u32, u32) input.
@def reachable(u32, u32) output.

reachable(x, z) :-
  edge(x, y).

reachable(a, b) :-
  edge(x, y).

//--- ungrounded_var_in_rule_expected.out
[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@8:14-8:15
     │
   8 │ ╭┤ reachable(x, z) :-
     • │               ┬
     • │               ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a relation.
   9 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause in the same rule.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@11:11-11:12
     │
  11 │ ╭┤ reachable(a, b) :-
     • │            ┬
     • │            ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in another clause in the same rule.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@11:14-11:15
     │
  11 │ ╭┤ reachable(a, b) :-
     • │               ┬
     • │               ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in another clause in the same rule.
─────╯
//--- program3.eclair

// RUN: %eclair compile %t/program3.eclair 2> %t/ungrounded_var_check_in_rule_body_actual.out
// RUN: diff -w %t/ungrounded_var_check_in_rule_body_expected.out %t/ungrounded_var_check_in_rule_body_actual.out

@def edge(u32, u32) input.
@def reachable(u32, u32) output.

reachable(x, z) :-
  edge(x, y),
  reachable(y, z),
  edge(a, b).

//--- ungrounded_var_check_in_rule_body_expected.out
