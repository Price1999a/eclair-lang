// RUN: mkdir -p %t && sed s@TEST_DIR@%t@g %s > %t/input.test
// RUN: split-file %t/input.test %t

// RUN: %eclair compile %t/program1.eclair 2> %t/program1_actual.out
// RUN: diff -w %t/program1_expected.out %t/program1_actual.out

//--- program1.eclair
@def fact(u32, u32) input.
@def rule(u32, u32) output.

rule(x, y) :-
  x < y,
  x <= y,
  x > y,
  x >= y,
  x != y,
  fact(x, y).

//--- program1_expected.out
//--- program2.eclair

// RUN: %eclair compile %t/program2.eclair 2> %t/program2_actual.out
// RUN: diff -w %t/program2_expected.out %t/program2_actual.out

@def fact(u32, u32) input.
@def rule(u32, u32) output.

rule(x, y) :-
  x < z,
  z <= y,
  x > z,
  z >= y,
  x != z,
  fact(x, y).

//--- program2_expected.out
[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@9:7-9:8
     │
   8 │ ╭┤ rule(x, y) :-
   9 │ │    x < z,
     • │        ┬
     • │        ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a clause.
  10 │ │    z <= y,
  11 │ │    x > z,
  12 │ │    z >= y,
  13 │ │    x != z,
  14 │ ├┤   fact(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@10:3-10:4
     │
   8 │ ╭┤ rule(x, y) :-
   9 │ │    x < z,
  10 │ │    z <= y,
     • │    ┬
     • │    ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a clause.
  11 │ │    x > z,
  12 │ │    z >= y,
  13 │ │    x != z,
  14 │ ├┤   fact(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@11:7-11:8
     │
   8 │ ╭┤ rule(x, y) :-
   9 │ │    x < z,
  10 │ │    z <= y,
  11 │ │    x > z,
     • │        ┬
     • │        ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a clause.
  12 │ │    z >= y,
  13 │ │    x != z,
  14 │ ├┤   fact(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@12:3-12:4
     │
   8 │ ╭┤ rule(x, y) :-
   9 │ │    x < z,
  10 │ │    z <= y,
  11 │ │    x > z,
  12 │ │    z >= y,
     • │    ┬
     • │    ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a clause.
  13 │ │    x != z,
  14 │ ├┤   fact(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@13:8-13:9
     │
   8 │ ╭┤ rule(x, y) :-
   9 │ │    x < z,
  10 │ │    z <= y,
  11 │ │    x > z,
  12 │ │    z >= y,
  13 │ │    x != z,
     • │         ┬
     • │         ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a clause.
  14 │ ├┤   fact(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in another clause.
─────╯
//--- program3.eclair

// RUN: %eclair compile %t/program3.eclair 2> %t/program3_actual.out
// RUN: diff -w %t/program3_expected.out %t/program3_actual.out

@def fact(u32, u32) input.
@def rule(u32, u32) output.

rule(x, y) :-
  x = z,
  y = a,
  a < z,
  fact(x, y).

rule(x, y) :-
  x = z,
  y = a,
  a < z,
  fact(z, y).

//--- program3_expected.out
