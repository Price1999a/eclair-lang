// Input facts
.decl lit_number(node_id: unsigned, value: unsigned)
.decl lit_string(node_id: unsigned, value: symbol)
.decl variable(node_id: unsigned, var_name: symbol)
.decl assign(node_id: unsigned, lhs_node_id: unsigned, rhs_node_id: unsigned)
.decl atom(node_id: unsigned, name: symbol)
.decl atom_arg(atom_id: unsigned, atom_arg_pos: unsigned, atom_arg_id: unsigned)
.decl rule(rule_id: unsigned, name: symbol)
.decl rule_arg(rule_id: unsigned, rule_arg_pos: unsigned, rule_arg_id: unsigned)
.decl rule_clause(rule_id: unsigned, rule_clause_pos: unsigned, rule_clause_id: unsigned)
.decl declare_type(node_id: unsigned, name: symbol)
.decl module(node_id: unsigned)
.decl module_declaration(module_id: unsigned, declaration_id: unsigned)
.decl rule_variable(rule_id: unsigned, variable_id: unsigned)

// Internal rules
.decl wildcard(node_id: unsigned) inline
.decl rule_head_var(rule_id: unsigned, var_id: unsigned, var_name: symbol)
.decl rule_clause_var(rule_id: unsigned, var_id: unsigned, var_name: symbol)
.decl alias(rule_id: unsigned, id1: unsigned, id2: unsigned)
.decl points_to(rule_id: unsigned, id1: unsigned, id2: unsigned)

// Output facts / rules
.decl points_to_var(rule_id: unsigned, var_id1: unsigned, var_id2: unsigned, var_name: symbol)
.decl variable_in_fact(node_id: unsigned, var_name: symbol)
.decl ungrounded_variable(rule_id: unsigned, var_id: unsigned, var_name: symbol)
.decl empty_module(node_id: unsigned)
.decl wildcard_in_fact(fact_node_id: unsigned,  fact_arg_id: unsigned, pos: unsigned)
.decl wildcard_in_rule_head(rule_node_id: unsigned, rule_arg_id: unsigned, pos: unsigned)
.decl wildcard_in_assignment(assign_node_id: unsigned, wildcard_node_id: unsigned)

.input lit_number
.input lit_string
.input variable
.input assign
.input atom
.input atom_arg
.input rule
.input rule_arg
.input rule_clause
.input declare_type
.input module
.input module_declaration
.input rule_variable

.output points_to_var
.output variable_in_fact
.output wildcard_in_fact
.output ungrounded_variable
.output empty_module
.output wildcard_in_rule_head
.output wildcard_in_assignment

// Top level facts: no variables allowed
variable_in_fact(atom_arg_id, var_name) :-
  module_declaration(_, atom_id),
  atom_arg(atom_id, _, atom_arg_id),
  variable(atom_arg_id, var_name),
  var_name != "_".

// Rules: no variables allowed in rule head if not used in rule body
ungrounded_variable(rule_id, var_id, var_name) :-
  rule_head_var(rule_id, var_id, var_name),
  var_name != "_",
  !rule_clause_var(rule_id, _, var_name).  // Only compare by variable name!

empty_module(node_id) :-
  module(node_id),
  !module_declaration(node_id, _).

wildcard(node_id) :-
  variable(node_id, "_").

wildcard_in_rule_head(rule_id, rule_arg_id, pos) :-
  rule_arg(rule_id, pos, rule_arg_id),
  wildcard(rule_arg_id).

wildcard_in_fact(atom_id, atom_arg_id, pos) :-
  module_declaration(_, atom_id),
  atom_arg(atom_id, pos, atom_arg_id),
  wildcard(atom_arg_id).

wildcard_in_assignment(assign_node_id, lhs_node_id) :-
  assign(assign_node_id, lhs_node_id, _),
  wildcard(lhs_node_id).

wildcard_in_assignment(assign_node_id, rhs_node_id) :-
  assign(assign_node_id, _, rhs_node_id),
  wildcard(rhs_node_id).

// All variables with the same name in a rule are aliases of each other.
alias(rule_id, var_id1, var_id2) :-
  rule_variable(rule_id, var_id1),
  rule_variable(rule_id, var_id2),
  variable(var_id1, var_name),
  variable(var_id2, var_name).

// Two values are aliases if they are used inside an equality.
// NOTE: Datalog supports both x = 123 and 123 = x.
alias(rule_id, id1, id2),
alias(rule_id, id2, id1) :-
  rule_clause(rule_id, _, rule_clause_id),
  assign(rule_clause_id, id1, id2).

// Non-recursive case: what does a variable point to?
points_to(rule_id, id1, id2) :-
  alias(rule_id, id1, id2),
  variable(id1, _).

// Recursive case: a = b, b = c results in a = c
points_to(rule_id, id1, id4) :-
  points_to(rule_id, id1, id2),
  variable(id2, var_name),
  variable(id3, var_name),
  alias(rule_id, id3, id4).

// NOTE: right now only takes variables into account, not literals (enhancement for later).
points_to_var(rule_id, id1, id2, var_name) :-
  points_to(rule_id, id1, id2),
  variable(id2, var_name).

// Helper relation for getting all grounded variables in head of a rule.
rule_head_var(rule_id, var_id, var_name) :-
  rule_arg(rule_id, _, var_id),
  variable(var_id, var_name).

// Helper relation for getting all grounded variables in body of a rule.
rule_clause_var(rule_id, var_id, var_name) :-
  rule_clause(rule_id, _, rule_clause_id),
  atom_arg(rule_clause_id, _, var_id),
  variable(var_id, var_name).
